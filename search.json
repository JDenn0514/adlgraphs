[{"path":"https://jdenn0514.github.io/adlgraphs/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 adlgraphs authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/articles/data_transformations.html","id":"num_rev","dir":"Articles","previous_headings":"","what":"num_rev()","title":"data_transformations","text":"num_rev() designed forcats::fct_rev() mind. However, instead operating factors, num_rev() operates numeric vectors. Often, working survey data, want reverse values numeric vector. However, done, underlying metadata variable lost. purpose num_rev() fix automate process reversing numeric vector, maintaining variable value labels. addition, function adds new attribute called transformation describes data transformation used create variable. vignette, hope show function makes life lot easier want reverse variable maintaining metadata. examples vignette get increasingly complex progress. Let’s look example fake data set comprised four variables. data set, w value labels variable label, x variable label, y value labels, z variable value labels. allows us see function provides different outputs depending kind metadata function . Now let’s show function works practice well data transformation without function. start showing w metadata makes relatively easy replicate without function. Now let’s check see fun_w base_w identical using waldo::compare(). can see differences two vectors. addition, check underlying structure data, specifically two variables. can see variables attribute called “transformation” contains information explaining happened sort data transformation variables underwent. Now let’s check x new data. Let’s compare new variable created using num_rev() function called num_rev_x new variable created simple reversal 5 - x ’ll call . can see values , hte Since x variable label, bit -depth replicate results get num_rev() function. can see variables . Moreover, just one line code ended ~5 lines code. may seem like much, becomes lot bunch variables . Now understand output str(new_df), three things note : first first line variable indicates values variable 10 values. second line shows variable label attribute third line shows transformation attribute Now check y see something similar. First, since variable value labels, need tomake sure add value labels base model note transformation. importantly, can see values fun_y base_y changed, value labels stayed y. important person’s response didn’t change, thing value associating . Moreover, can “label” attribute gone now two “labels” attributes show instead. original variable variabel label value labels. z complex variable contains variable value labels. originally one line code quickly became 9 lines code. get result num_rev(), need use haven::labelled() add variable label value labels need add structure() add transformation.","code":"library(adlgraphs) library(tibble) library(dplyr) library(labelled) library(haven) library(waldo)  # create the new data df <- tibble::tibble(   w = sample(1:4, 20, replace = TRUE),   x = sample(1:4, 20, replace = TRUE),   y = sample(1:4, 20, replace = TRUE),   z = sample(1:4, 20, replace = TRUE) ) %>%    # add value labels to y and z but not x to see what happens with no labels   labelled::set_value_labels(     z = c(`Strongly agree` = 1,           `Somewhat agree` = 2,           `Somewhat disagree` = 3,           `Strongly disagree` = 4),     y = c(`Strongly agree` = 1,           `Somewhat agree` = 2,           `Somewhat disagree` = 3,           `Strongly disagree` = 4),   ) %>%   # set variable labels to x and z   labelled::set_variable_labels(     x = \"This is the variable label for x\",     z = \"This is the variable label for z\"   ) new_df <- df %>%    mutate(     fun_w = num_rev(w),     # first subtract w from 5 and then use structure to add the metadata     base_w = 5 - w %>%        structure(transformation = \"Reversing 'w'\"),     .keep = \"used\"   )   # see the results head(new_df) #> # A tibble: 6 × 3 #>       w fun_w base_w #>   <int> <dbl>  <dbl> #> 1     1     4      4 #> 2     3     2      2 #> 3     2     3      3 #> 4     1     4      4 #> 5     2     3      3 #> 6     3     2      2 # use waldo::compare to see if there are differences waldo::compare(new_df$fun_w, new_df$base_w) #> ✔ No differences  # check the structure of the data now str(new_df) #> tibble [20 × 3] (S3: tbl_df/tbl/data.frame) #>  $ w     : int [1:20] 1 3 2 1 2 3 4 3 2 2 ... #>  $ fun_w : num [1:20] 4 2 3 4 3 2 1 2 3 3 ... #>   ..- attr(*, \"transformation\")= 'glue' chr \"Reversing 'w'\" #>  $ base_w: num [1:20] 4 2 3 4 3 2 1 2 3 3 ... #>   ..- attr(*, \"transformation\")= chr \"Reversing 'w'\" new_df <- df %>%    mutate(     fun_x = num_rev(x),     sub_x = 5 - x   ) new_df <- df %>%    mutate(     fun_x = num_rev(x),     # use haven labelled to add the variable label     base_x = haven::labelled(       # reverse the vector       5 - x,       # add the variable label       label = \"This is the variable label for x\"     ) %>%        # add the attribute for the transformation       structure(transformation = \"Reversing 'x'\"),     .keep = \"used\"   )   # check to see if the data is the same waldo::compare(new_df$fun_x, new_df$base_x) #> ✔ No differences  # check the structure of the data now str(new_df) #> tibble [20 × 3] (S3: tbl_df/tbl/data.frame) #>  $ x     : int [1:20] 3 4 2 2 1 3 1 4 1 1 ... #>   ..- attr(*, \"label\")= chr \"This is the variable label for x\" #>  $ fun_x : dbl+lbl [1:20] 2, 1, 3, 3, 4, 2, 4, 1, 4, 4, 3, 1, 2, 1, 3, 4, 1, 3, 1, 4 #>    ..@ label         : chr \"This is the variable label for x\" #>    ..@ transformation: 'glue' chr \"Reversing 'x'\" #>  $ base_x: dbl+lbl [1:20] 2, 1, 3, 3, 4, 2, 4, 1, 4, 4, 3, 1, 2, 1, 3, 4, 1, 3, 1, 4 #>    ..@ label         : chr \"This is the variable label for x\" #>    ..@ transformation: chr \"Reversing 'x'\" new_df <- df %>%    mutate(     fun_y = num_rev(y),     # use haven labelled to add the variable label     base_y = haven::labelled(       # reverse the vector       5 - y,       # add the variable label       labels = c(\"Strongly disagree\" = 1,                  \"Somewhat disagree\" = 2,                  \"Somewhat agree\" = 3,                  \"Strongly agree\" = 4)     ) %>%        # add the attribute for the transformation       structure(transformation = \"Reversing 'y' while maintaining correct value labels\"),     .keep = \"used\"   )  # preview data head(new_df) #> # A tibble: 6 × 3 #>   y                     fun_y                 base_y                #>   <int+lbl>             <dbl+lbl>             <dbl+lbl>             #> 1 4 [Strongly disagree] 1 [Strongly disagree] 1 [Strongly disagree] #> 2 3 [Somewhat disagree] 2 [Somewhat disagree] 2 [Somewhat disagree] #> 3 2 [Somewhat agree]    3 [Somewhat agree]    3 [Somewhat agree]    #> 4 3 [Somewhat disagree] 2 [Somewhat disagree] 2 [Somewhat disagree] #> 5 1 [Strongly agree]    4 [Strongly agree]    4 [Strongly agree]    #> 6 4 [Strongly disagree] 1 [Strongly disagree] 1 [Strongly disagree]  # check to see if the data is the same waldo::compare(new_df$fun_y, new_df$base_y) #> ✔ No differences  # check the structure of the data now str(new_df) #> tibble [20 × 3] (S3: tbl_df/tbl/data.frame) #>  $ y     : int+lbl [1:20] 4, 3, 2, 3, 1, 4, 2, 3, 3, 3, 4, 3, 1, 2, 4, 4, 1, 2, 1, 2 #>    ..@ labels: Named int [1:4] 1 2 3 4 #>    .. ..- attr(*, \"names\")= chr [1:4] \"Strongly agree\" \"Somewhat agree\" \"Somewhat disagree\" \"Strongly disagree\" #>  $ fun_y : dbl+lbl [1:20] 1, 2, 3, 2, 4, 1, 3, 2, 2, 2, 1, 2, 4, 3, 1, 1, 4, 3, 4, 3 #>    ..@ labels        : Named num [1:4] 1 2 3 4 #>    .. ..- attr(*, \"names\")= chr [1:4] \"Strongly disagree\" \"Somewhat disagree\" \"Somewhat agree\" \"Strongly agree\" #>    ..@ transformation: 'glue' chr \"Reversing 'y' while maintaining correct value labels\" #>  $ base_y: dbl+lbl [1:20] 1, 2, 3, 2, 4, 1, 3, 2, 2, 2, 1, 2, 4, 3, 1, 1, 4, 3, 4, 3 #>    ..@ labels        : Named num [1:4] 1 2 3 4 #>    .. ..- attr(*, \"names\")= chr [1:4] \"Strongly disagree\" \"Somewhat disagree\" \"Somewhat agree\" \"Strongly agree\" #>    ..@ transformation: chr \"Reversing 'y' while maintaining correct value labels\" new_df <- df %>%    mutate(     fun_z = num_rev(z),     # use haven labelled to add the variable label     base_z = haven::labelled(       # reverse the vector       5 - z,       # add the variable label       labels = c(\"Strongly disagree\" = 1,                  \"Somewhat disagree\" = 2,                  \"Somewhat agree\" = 3,                  \"Strongly agree\" = 4),       label = c(\"This is the variable label for z\")     ) %>%        # add the attribute for the transformation       structure(transformation = \"Reversing 'z' while maintaining correct value labels\"),     .keep = \"used\"   )  # preview data head(new_df) #> # A tibble: 6 × 3 #>   z                     fun_z                 base_z                #>   <int+lbl>             <dbl+lbl>             <dbl+lbl>             #> 1 1 [Strongly agree]    4 [Strongly agree]    4 [Strongly agree]    #> 2 3 [Somewhat disagree] 2 [Somewhat disagree] 2 [Somewhat disagree] #> 3 1 [Strongly agree]    4 [Strongly agree]    4 [Strongly agree]    #> 4 4 [Strongly disagree] 1 [Strongly disagree] 1 [Strongly disagree] #> 5 4 [Strongly disagree] 1 [Strongly disagree] 1 [Strongly disagree] #> 6 1 [Strongly agree]    4 [Strongly agree]    4 [Strongly agree]  # check to see if the data is the same waldo::compare(new_df$fun_z, new_df$base_z) #> ✔ No differences  # check the structure of the data now str(new_df) #> tibble [20 × 3] (S3: tbl_df/tbl/data.frame) #>  $ z     : int+lbl [1:20] 1, 3, 1, 4, 4, 1, 3, 4, 3, 2, 2, 4, 4, 4, 2, 1, 2, 3, 1, 2 #>    ..@ labels: Named int [1:4] 1 2 3 4 #>    .. ..- attr(*, \"names\")= chr [1:4] \"Strongly agree\" \"Somewhat agree\" \"Somewhat disagree\" \"Strongly disagree\" #>    ..@ label : chr \"This is the variable label for z\" #>  $ fun_z : dbl+lbl [1:20] 4, 2, 4, 1, 1, 4, 2, 1, 2, 3, 3, 1, 1, 1, 3, 4, 3, 2, 4, 3 #>    ..@ labels        : Named num [1:4] 1 2 3 4 #>    .. ..- attr(*, \"names\")= chr [1:4] \"Strongly disagree\" \"Somewhat disagree\" \"Somewhat agree\" \"Strongly agree\" #>    ..@ label         : chr \"This is the variable label for z\" #>    ..@ transformation: 'glue' chr \"Reversing 'z' while maintaining correct value labels\" #>  $ base_z: dbl+lbl [1:20] 4, 2, 4, 1, 1, 4, 2, 1, 2, 3, 3, 1, 1, 1, 3, 4, 3, 2, 4, 3 #>    ..@ labels        : Named num [1:4] 1 2 3 4 #>    .. ..- attr(*, \"names\")= chr [1:4] \"Strongly disagree\" \"Somewhat disagree\" \"Somewhat agree\" \"Strongly agree\" #>    ..@ label         : chr \"This is the variable label for z\" #>    ..@ transformation: chr \"Reversing 'z' while maintaining correct value labels\""},{"path":"https://jdenn0514.github.io/adlgraphs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jacob Dennen. Author, maintainer.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dennen J (2024). adlgraphs: Create Graphs ADL Style Branding. R package version 0.1.0,  https://jdenn0514.github.io/adlgraphs/, https://github.com/JDenn0514/adlgraphs.","code":"@Manual{,   title = {adlgraphs: Create Graphs with ADL Style and Branding},   author = {Jacob Dennen},   year = {2024},   note = {R package version 0.1.0,  https://jdenn0514.github.io/adlgraphs/},   url = {https://github.com/JDenn0514/adlgraphs}, }"},{"path":[]},{"path":"https://jdenn0514.github.io/adlgraphs/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Create Graphs with ADL Style and Branding","text":"goal adlgraphs help ensure data visualizations produced Center Antisemitism Research (CAR) Anti-Defamation League (ADL) consistent ADL’s brand guidelines CAR’s data visualizations consistent cohesive.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Graphs with ADL Style and Branding","text":"can install development version adlgraphs GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"JDenn0514/adlgraphs\")"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_bar_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Create bar plots in ADL's style — adl_bar_plots","title":"Create bar plots in ADL's style — adl_bar_plots","text":"function allows users create different types bar plots ADL's style. wrapper around geom_col, geom_text/,geom_label, geom_errorbar. function created standardize graphs produced CAR's team cut amount time takes make graphs.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_bar_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create bar plots in ADL's style — adl_bar_plots","text":"","code":"adl_bar_plots(   df,   x,   y,   col_label,   group = NULL,   fill = NULL,   direction = \"vertical\",   col_text_size = 3.25,   distance_from_col = 0.25,   freq_plot = TRUE,   position = NULL,   dodge_width = 0.8,   dodge_reverse = TRUE,   ... )"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_bar_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create bar plots in ADL's style — adl_bar_plots","text":"df dataframe tibble. can piped like normal ggplot function. x Variable goes x-axis. required. y Variable goes y-axis. required. col_label Variable provides values used labels plot. used geom_text geom_label group Explicitly set overall grouping variable. used stacked graphs dodged graphs. NULL, default, grouping variable used. Note: need set  data grouped . fill Set grouping variable inside bars colored. used stacked graphs dodged graphs. NULL, default, grouping variable used. Note: need set data grouped . direction character string indicating direction bars. two options: \"vertical\", default, bars vertical \"horizontal\" bars horizontal must set explicitly affects location text, labels, error bars. col_text_size size text inside/top columns. Default 3.25. distance_from_col far labels bars freq plots far bottom bar mean plots. freq_plot Logical. Determines frequency plot. TRUE, default, graph styled frequency plot bar labels appearing outside bars. FALSE, graph styled mean plot labels appearing. position character string determining plot handles grouped graph. default NULL assumes grouping variable. set \"dodge\" get dodged plot. best used comparing two groups, especially add 100. set \"stacked\" get stacked plot. used comparing multiple statements likert scales things add 100. dodge_width adjusts width dodge plot. info check position_dodge. dodge_reverse Reverses order bars text dodge plot. info check position_dodge. ... Additional arguments passed theme_default","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_bar_plots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create bar plots in ADL's style — adl_bar_plots","text":"mentioned previously, function wrapper around various {ggplot2} functions order save time making simple bar plots, dodged bar plots, stacked bar plots. result, possible combine every element graph. like , recommend using actual geoms {ggplot2}. elements included serve purpose allow customize graphs look nice. Moreover, arguments created types graphs CAR produces, namely mean plots frequency plots.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Complete list of available adl official color palettes — adl_palettes","title":"Complete list of available adl official color palettes — adl_palettes","text":"list color palettes choose , preview directly console.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complete list of available adl official color palettes — adl_palettes","text":"","code":"adl_palettes"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_palettes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Complete list of available adl official color palettes — adl_palettes","text":"list 9 color objects elements. primary Primary categorical color secondary Seconday categorical color tertiary Tertiary categorical color pid3 Palette partisanship/ideology (categorical) categorical Palette categorical data 7 groups (categorical) likert_6 Palette likert scales 6 response options (diverging) likert_4 Palette likert scales 4 response options (diverging) bluescale Blue scale color palette (sequential) grayscale Grayscale color palette (sequential)","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_palettes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Complete list of available adl official color palettes — adl_palettes","text":"Pretty print plot methods powered prismatic package. palette stored color object enact behaviour.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_palettes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Complete list of available adl official color palettes — adl_palettes","text":"","code":"adl_palettes$primary #> <colors> #> #00A0E0FF  adl_palettes$secondary #> <colors> #> #B0B1B3FF  adl_palettes$tertiary #> <colors> #> #A1D55DFF  adl_palettes$pid3 #> <colors> #> #00A0E0FF #60269EFF #DB0632FF  adl_palettes$categorical #> <colors> #> #00A0E0FF #B0B1B3FF #A1D55DFF #093C71FF #DB0632FF #60269EFF #EED282FF #2C2E35FF  adl_palettes$likert_6 #> <colors> #> #093C71FF #00A0E0FF #97D0DCFF #D8D9DAFF #B0B1B3FF #595B60FF  adl_palettes$likert_4 #> <colors> #> #093C71FF #97D0DCFF #D8D9DAFF #595B60FF  adl_palettes$bluescale #> <colors> #> #093C71FF #97D0DCFF  adl_palettes$grayscale #> <colors> #> #2C2E35FF #D8D9DAFF"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adlgraphs-package.html","id":null,"dir":"Reference","previous_headings":"","what":"adlgraphs: Create Graphs with ADL Style and Branding — adlgraphs-package","title":"adlgraphs: Create Graphs with ADL Style and Branding — adlgraphs-package","text":"package designed make easier folks CAR ADL make graphs. package contains different themes related various graph styles, guide colors use , various functions created related various graphs (mainly coefficient plots).","code":""},{"path":[]},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adlgraphs-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"adlgraphs: Create Graphs with ADL Style and Branding — adlgraphs-package","text":"Maintainer: Jacob Dennen jdennen@adl.org","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/case_match_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"case_match with factor levels — case_match_fct","title":"case_match with factor levels — case_match_fct","text":"Recode variable using dplyr::case_match() syntax","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/case_match_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"case_match with factor levels — case_match_fct","text":"","code":"case_match_fct(.x, ..., .default = NULL)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/case_match_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"case_match with factor levels — case_match_fct","text":".x vector match . ... <dynamic-dots> sequence two-sided formulas: old_values ~ new_value. right hand side (RHS) determines output value values .x match left hand side (LHS). LHS must evaluate type vector .x. can length, allowing map multiple .x values RHS value. value repeated LHS, .e. value .x matches multiple cases, first match used. RHS inputs coerced common type. RHS input recycled size .x. .default value used values .x matched LHS inputs. NULL, default, missing value used.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/case_match_fct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"case_match with factor levels — case_match_fct","text":"","code":"# import dplyr so we can use their starwars dataset library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union # create a vector with a variable label species <- starwars$species %>% structure(label = \"This is a variable label\")  new_species <- case_match_fct(   species,   \"Human\" ~ \"Humanoid\",   \"Droid\" ~ \"Robot\",   c(\"Wookiee\", \"Ewok\") ~ \"Hairy\",   .default = \"Other\" )  # now let's check to see that it added the transformation metadata and the #variable label str(new_species) #>  Factor w/ 4 levels \"Humanoid\",\"Robot\",..: 1 2 2 1 1 1 1 2 1 1 ... #>  - attr(*, \"label\")= chr \"This is a variable label\" #>  - attr(*, \"transformation\")= 'glue' chr \"Recoded 'species' as a factor and set the levels based on their order.\\nThe data transformation is as follows:\\\"| __truncated__  # now let's create a variable \"new_species\" and get the frequencies for it # we can see the frequencies are in the same order we applied. starwars %>%   dplyr::mutate(     new_species = case_match_fct(       species,       \"Human\" ~ \"Humanoid\",       \"Droid\" ~ \"Robot\",       c(\"Wookiee\", \"Ewok\") ~ \"Hairy\",       .default = \"Other\"     )   ) %>%   dplyr::count(new_species) #> # A tibble: 4 × 2 #>   new_species     n #>   <fct>       <int> #> 1 Humanoid       35 #> 2 Robot           6 #> 3 Hairy           3 #> 4 Other          43  # now let's do the same but with dplyr::case_match() # we can see that the frequencies are in alphabetical order starwars %>%   dplyr::mutate(     new_species = dplyr::case_match(       species,       \"Human\" ~ \"Humanoid\",       \"Droid\" ~ \"Robot\",       c(\"Wookiee\", \"Ewok\") ~ \"Hairy\",       .default = \"Other\"     )   ) %>%   dplyr::count(new_species) #> # A tibble: 4 × 2 #>   new_species     n #>   <chr>       <int> #> 1 Hairy           3 #> 2 Humanoid       35 #> 3 Other          43 #> 4 Robot           6"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/case_when_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"case_when with factor levels — case_when_fct","title":"case_when with factor levels — case_when_fct","text":"Recode variable using dplyr::case_match() syntax","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/case_when_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"case_when with factor levels — case_when_fct","text":"","code":"case_when_fct(..., .default = NULL)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/case_when_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"case_when with factor levels — case_when_fct","text":"... <dynamic-dots> sequence two-sided formulas. left hand side (LHS) determines values match case. right hand side (RHS) provides replacement value. LHS inputs must evaluate logical vectors. RHS inputs coerced common type. inputs recycled common size. said, encourage LHS inputs size. Recycling mainly useful RHS inputs, might supply size 1 input recycled size LHS inputs. NULL inputs ignored. .default value used LHS inputs return either FALSE NA. .default must size 1 size common size computed .... .default participates computation common type RHS inputs. NA values LHS conditions treated like FALSE, meaning result locations assigned .default value. handle missing values conditions differently, must explicitly catch another condition fall .default. typically involves variation .na(x) ~ value tailored usage case_when(). NULL, default, missing value used.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_all_freqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Export frequencies for a set of variables to a word doc. — get_all_freqs","title":"Export frequencies for a set of variables to a word doc. — get_all_freqs","text":"function uses get_freq_table() get frequencies set variables suppplied user. outputs frequencies word doc.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_all_freqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export frequencies for a set of variables to a word doc. — get_all_freqs","text":"","code":"get_all_freqs(df, x, group, wt, file_name)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_all_freqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export frequencies for a set of variables to a word doc. — get_all_freqs","text":"df object type data.frame tibble. piping df function, required. x vector variables want get frequencies . group character string. first grouping variable. wt character string. Add weighting variable want get weighted frequencies file_name character string specifying name file created frequencies file located. File must end .docx","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_coefficients.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tidied tibble of regression results — get_coefficients","title":"Create a tidied tibble of regression results — get_coefficients","text":"function created produce results similar find broom.helpers, changes. notably, main reason creating function, can standardize regression coefficients scaling mean-centering input data.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_coefficients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tidied tibble of regression results — get_coefficients","text":"","code":"get_coefficients(   model,   conf.level = 0.95,   standardize = FALSE,   n.sd = 2,   exponentiate = FALSE,   add_ss = TRUE,   add_labels = TRUE,   add_n = FALSE )"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_coefficients.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tidied tibble of regression results — get_coefficients","text":"model model object created using either lm glm. Can also piped function. conf.level number 0 1 signifies width desired confidence interval. Default 0.95, corresponds 95% confidence interval. standardize TRUE, reports standardized regression coefficients scaling mean-centering input data. Default FALSE. n.sd standardize TRUE, determines number standard deviations used scale data. Default 2. exponentiate Logical. TRUE, reports exponentiated coefficients confidence intervals exponential models like logit Poisson models. quantity known odds ratio binary outcomes incidence rate ratio count models. Default FALSE. add_ss Logical. TRUE, default, new column created called ss gives \"Yes\" term statistically significant \"\" term statistically significant. add_labels Logical. TRUE adds variable value labels add_n Logical. true adds number observations per variable","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_coefficients.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a tidied tibble of regression results — get_coefficients","text":"function also takes advantage tidy_add_reference_rows/, tidy_add_term_labels/, tidy_add_n/ allow include reference row variable, underlying variable value labels, number observations.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_freq_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the frequencies as a GT table — get_freq_table","title":"Get the frequencies as a GT table — get_freq_table","text":"function creates GT table frequencies specified variable ability get frequencies one grouping variable. can used , created used get_all_freqs()`, function outputs frequencies set variables word doc.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_freq_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the frequencies as a GT table — get_freq_table","text":"","code":"get_freq_table(df, x, group, wt)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_freq_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the frequencies as a GT table — get_freq_table","text":"df object type data.frame tibble. piping df function, required. x Either character string symbol. variable want get frequencies. group Either character string symbol. grouping variable. wt Weights. Add weighting variable want get weighted frequencies","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Make binary variables — make_binary","title":"Make binary variables — make_binary","text":"Convert vector class factor haven_labelled \"binary vector\". refer \"binary vector\", referring vector class numeric two values: 0 1. Another way thinking turning variable dummy variable.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make binary variables — make_binary","text":"","code":"make_binary(x, flip_values = FALSE)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make binary variables — make_binary","text":"x vector class haven_labelled factor. flip_values Logical. FALSE, default, values kept . TRUE, values associated 1 0 flipped. See third example information.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_binary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make binary variables — make_binary","text":"make_binary() builds make_dicho() therefore designed work vector class factor, haven_labelled, numeric value labels. built make_dicho, vector  numeric value labels, function return error. Similar make_dicho() provides opportunity flip factor levels, make_binary() allows flip values recoded 0 recoded 1. , just set flip_values = TRUE. addition, function adds three new attributes. first attribute, transformation, indicates data transformation original vector underwent create new vector. second attribute, label, contains variable label found original variable. However, original vector variable label, attribute show . third attribute, labels, adds value labels can see 1 0 mean.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make binary variables — make_binary","text":"","code":"library(tibble) library(dplyr) library(labelled) library(haven)  # create fake data df <- tibble::tribble(   ~x, ~y, ~z,   3, 2, 3,   4, 4, 2,   2, 6, 1,   1, 1, 4,   5, 4, 3,   6, 5, 6 ) %>% # add value labels labelled::set_value_labels(   x = c(`Strongly agree` = 1,         `Agree` = 2,         `Somewhat agree` = 3,         `Somewhat disagree` = 4,         `Disagree` = 5,         `Strongly disagree` = 6),   y = c(`Strongly agree` = 1,         `Agree` = 2,         `Somewhat agree` = 3,         `Somewhat disagree` = 4,         `Disagree` = 5,         `Strongly disagree` = 6),   z = c(`Strongly agree` = 1,         `Agree` = 2,         `Somewhat agree` = 3,         `Somewhat disagree` = 4,         `Disagree` = 5,         `Strongly disagree` = 6) ) %>% # add variable labels labelled::set_variable_labels(   x = \"This is the variable label for x\",   y = \"This is the variable label for y\",   z = \"This is the variable label for z\" )  # show the data transformation with a haven_labelled vector binary_df <- df %>% dplyr::mutate(binary_x = make_binary(x)) # check the updated dataset binary_df #> # A tibble: 6 × 4 #>   x                     y                     z                     binary_x #>   <dbl+lbl>             <dbl+lbl>             <dbl+lbl>                <dbl> #> 1 3 [Somewhat agree]    2 [Agree]             3 [Somewhat agree]           1 #> 2 4 [Somewhat disagree] 4 [Somewhat disagree] 2 [Agree]                    0 #> 3 2 [Agree]             6 [Strongly disagree] 1 [Strongly agree]           1 #> 4 1 [Strongly agree]    1 [Strongly agree]    4 [Somewhat disagree]        1 #> 5 5 [Disagree]          4 [Somewhat disagree] 3 [Somewhat agree]           0 #> 6 6 [Strongly disagree] 5 [Disagree]          6 [Strongly disagree]        0  # Check the attributes attributes(binary_df$binary_x) #> $transformation #> Converting 'x' to a binary variable with 'Agree' = 1 and 'Disagree' = 0. #>  #> $label #> [1] \"This is the variable label for x\" #>  #> $labels #>    Agree Disagree  #>        1        0  #>  # another way of checking the attributes str(binary_df$binary_x) #>  num [1:6] 1 0 1 1 0 0 #>  - attr(*, \"transformation\")= 'glue' chr \"Converting 'x' to a binary variable with 'Agree' = 1 and 'Disagree' = 0.\" #>  - attr(*, \"label\")= chr \"This is the variable label for x\" #>  - attr(*, \"labels\")= Named num [1:2] 1 0 #>   ..- attr(*, \"names\")= chr [1:2] \"Agree\" \"Disagree\"  # check the factor levels unique(binary_df$binary_x) #> [1] 1 0  # ----------------------------------------------------------------------------  # function also works with factors binary_df <- df %>%   dplyr::mutate(     # convert variable to a factor     factor_x = haven::as_factor(x),     # convert the factor to a binary variable     binary_x = make_binary(factor_x)   )  # check the updated dataset binary_df #> # A tibble: 6 × 5 #>   x                     y                     z                factor_x binary_x #>   <dbl+lbl>             <dbl+lbl>             <dbl+lbl>        <fct>       <dbl> #> 1 3 [Somewhat agree]    2 [Agree]             3 [Somewhat agr… Somewha…        1 #> 2 4 [Somewhat disagree] 4 [Somewhat disagree] 2 [Agree]        Somewha…        0 #> 3 2 [Agree]             6 [Strongly disagree] 1 [Strongly agr… Agree           1 #> 4 1 [Strongly agree]    1 [Strongly agree]    4 [Somewhat dis… Strongl…        1 #> 5 5 [Disagree]          4 [Somewhat disagree] 3 [Somewhat agr… Disagree        0 #> 6 6 [Strongly disagree] 5 [Disagree]          6 [Strongly dis… Strongl…        0  # Check the attributes attributes(binary_df$binary_x) #> $transformation #> Converting 'factor_x' to a binary variable with 'Agree' = 1 and 'Disagree' = 0. #>  #> $label #> [1] \"This is the variable label for x\" #>  #> $labels #>    Agree Disagree  #>        1        0  #>  # another way of checking the attributes str(binary_df$binary_x) #>  num [1:6] 1 0 1 1 0 0 #>  - attr(*, \"transformation\")= 'glue' chr \"Converting 'factor_x' to a binary variable with 'Agree' = 1 and 'Disagree' = 0.\" #>  - attr(*, \"label\")= chr \"This is the variable label for x\" #>  - attr(*, \"labels\")= Named num [1:2] 1 0 #>   ..- attr(*, \"names\")= chr [1:2] \"Agree\" \"Disagree\"  # check the factor levels unique(binary_df$binary_x) #> [1] 1 0  # ----------------------------------------------------------------------------  # function also works inside dplyr::across()  # Create new columns using `across()` binary_df <- df %>%   dplyr::mutate(     # use this example if you don't want to flip the factor levels     dplyr::across(       x:z,       make_binary,       .names = \"binary_{col}\"     ),     # if you want to flip the factor levels, follow this example     dplyr::across(       x:z,       ~make_binary(., flip_values = TRUE),       .names = \"binary_flipped_{col}\"     )   ) # show that the function worked properly by creating two new sets of variables binary_df #> # A tibble: 6 × 9 #>   x                  y       z       binary_x binary_y binary_z binary_flipped_x #>   <dbl+lbl>          <dbl+l> <dbl+l>    <dbl>    <dbl>    <dbl>            <dbl> #> 1 3 [Somewhat agree] 2 [Agr… 3 [Som…        1        1        1                0 #> 2 4 [Somewhat disag… 4 [Som… 2 [Agr…        0        0        1                1 #> 3 2 [Agree]          6 [Str… 1 [Str…        1        0        1                0 #> 4 1 [Strongly agree] 1 [Str… 4 [Som…        1        1        0                0 #> 5 5 [Disagree]       4 [Som… 3 [Som…        0        0        1                1 #> 6 6 [Strongly disag… 5 [Dis… 6 [Str…        0        0        0                1 #> # ℹ 2 more variables: binary_flipped_y <dbl>, binary_flipped_z <dbl>  # show the underlying structure of the entire df str(binary_df) #> tibble [6 × 9] (S3: tbl_df/tbl/data.frame) #>  $ x               : dbl+lbl [1:6] 3, 4, 2, 1, 5, 6 #>    ..@ labels: Named num [1:6] 1 2 3 4 5 6 #>    .. ..- attr(*, \"names\")= chr [1:6] \"Strongly agree\" \"Agree\" \"Somewhat agree\" \"Somewhat disagree\" ... #>    ..@ label : chr \"This is the variable label for x\" #>  $ y               : dbl+lbl [1:6] 2, 4, 6, 1, 4, 5 #>    ..@ labels: Named num [1:6] 1 2 3 4 5 6 #>    .. ..- attr(*, \"names\")= chr [1:6] \"Strongly agree\" \"Agree\" \"Somewhat agree\" \"Somewhat disagree\" ... #>    ..@ label : chr \"This is the variable label for y\" #>  $ z               : dbl+lbl [1:6] 3, 2, 1, 4, 3, 6 #>    ..@ labels: Named num [1:6] 1 2 3 4 5 6 #>    .. ..- attr(*, \"names\")= chr [1:6] \"Strongly agree\" \"Agree\" \"Somewhat agree\" \"Somewhat disagree\" ... #>    ..@ label : chr \"This is the variable label for z\" #>  $ binary_x        : num [1:6] 1 0 1 1 0 0 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'x' to a binary variable with 'Agree' = 1 and 'Disagree' = 0.\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for x\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 0 #>   .. ..- attr(*, \"names\")= chr [1:2] \"Agree\" \"Disagree\" #>  $ binary_y        : num [1:6] 1 0 0 1 0 0 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'y' to a binary variable with 'Agree' = 1 and 'Disagree' = 0.\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for y\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 0 #>   .. ..- attr(*, \"names\")= chr [1:2] \"Agree\" \"Disagree\" #>  $ binary_z        : num [1:6] 1 1 1 0 1 0 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'z' to a binary variable with 'Agree' = 1 and 'Disagree' = 0.\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for z\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 0 #>   .. ..- attr(*, \"names\")= chr [1:2] \"Agree\" \"Disagree\" #>  $ binary_flipped_x: num [1:6] 0 1 0 0 1 1 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'x' to a binary variable with 'Disagree' = 1 and 'Agree' = 0.\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for x\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 0 #>   .. ..- attr(*, \"names\")= chr [1:2] \"Disagree\" \"Agree\" #>  $ binary_flipped_y: num [1:6] 0 1 1 0 1 1 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'y' to a binary variable with 'Disagree' = 1 and 'Agree' = 0.\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for y\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 0 #>   .. ..- attr(*, \"names\")= chr [1:2] \"Disagree\" \"Agree\" #>  $ binary_flipped_z: num [1:6] 0 0 0 1 0 1 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'z' to a binary variable with 'Disagree' = 1 and 'Agree' = 0.\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for z\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 0 #>   .. ..- attr(*, \"names\")= chr [1:2] \"Disagree\" \"Agree\"  # show how the levels are flipped when \"flip_levels = TRUE\" levels(binary_df$binary_x) #> NULL levels(binary_df$binary_flipped_x) #> NULL"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_dicho.html","id":null,"dir":"Reference","previous_headings":"","what":"Make dichotomous factors — make_dicho","title":"Make dichotomous factors — make_dicho","text":"Convert vector class factor haven_labelled \"dichotomous factor vector\". refer \"dichotomous factor vector\", referring vector class factor two levels opposites (e.g., \"Agree\" \"Disagree\")","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_dicho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make dichotomous factors — make_dicho","text":"","code":"make_dicho(x, flip_levels = FALSE)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_dicho.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make dichotomous factors — make_dicho","text":"x vector type haven_labelled factor. flip_levels Logical. FALSE, default, factor levels kept . TRUE, factor levels flipped. specify want change order factor level.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_dicho.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make dichotomous factors — make_dicho","text":"make_dicho designed work vector class factor, haven_labelled, numeric value labels. vector  numeric value labels, function return error. function first converts vector factor using as_factor() haven::as_factor() haven package. , removes first word multiple words factor level. resulting factor levels default alphabetical want reverse , just set flip_levels = TRUE function. addition, function adds two new attributes. first attribute, transformation, indicates data transformation original vector underwent create new vector. second attribute, label, contains variable label found original variable. However, original vector variable label, attribute show . useful care ","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_dicho.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make dichotomous factors — make_dicho","text":"","code":"library(tibble) library(dplyr) library(labelled) library(haven)  # create fake data df <- tibble::tribble(   ~x, ~y, ~z,   3, 2, 3,   4, 4, 2,   2, 6, 1,   1, 1, 4,   5, 4, 3,   6, 5, 6 ) %>% # add value labels labelled::set_value_labels(   x = c(`Strongly agree` = 1,         `Agree` = 2,         `Somewhat agree` = 3,         `Somewhat disagree` = 4,         `Disagree` = 5,         `Strongly disagree` = 6),   y = c(`Strongly agree` = 1,         `Agree` = 2,         `Somewhat agree` = 3,         `Somewhat disagree` = 4,         `Disagree` = 5,         `Strongly disagree` = 6),   z = c(`Strongly agree` = 1,         `Agree` = 2,         `Somewhat agree` = 3,         `Somewhat disagree` = 4,         `Disagree` = 5,         `Strongly disagree` = 6) ) %>% # add variable labels labelled::set_variable_labels(   x = \"This is the variable label for x\",   y = \"This is the variable label for y\",   z = \"This is the variable label for z\" )  # show the data transformation with a haven_labelled vector dicho_df <- df %>% dplyr::mutate(dicho_x = make_dicho(x)) # check the updated dataset dicho_df #> # A tibble: 6 × 4 #>   x                     y                     z                     dicho_x  #>   <dbl+lbl>             <dbl+lbl>             <dbl+lbl>             <fct>    #> 1 3 [Somewhat agree]    2 [Agree]             3 [Somewhat agree]    Agree    #> 2 4 [Somewhat disagree] 4 [Somewhat disagree] 2 [Agree]             Disagree #> 3 2 [Agree]             6 [Strongly disagree] 1 [Strongly agree]    Agree    #> 4 1 [Strongly agree]    1 [Strongly agree]    4 [Somewhat disagree] Agree    #> 5 5 [Disagree]          4 [Somewhat disagree] 3 [Somewhat agree]    Disagree #> 6 6 [Strongly disagree] 5 [Disagree]          6 [Strongly disagree] Disagree  # Check the attributes attributes(dicho_df$dicho_x) #> $levels #> [1] \"Agree\"    \"Disagree\" #>  #> $class #> [1] \"factor\" #>  #> $transformation #> Converting 'x' to a dichotomous factor with 'Agree' as the reference level #>  #> $label #> [1] \"This is the variable label for x\" #>  # another way of checking the attributes str(dicho_df$dicho_x) #>  Factor w/ 2 levels \"Agree\",\"Disagree\": 1 2 1 1 2 2 #>  - attr(*, \"transformation\")= 'glue' chr \"Converting 'x' to a dichotomous factor with 'Agree' as the reference level\" #>  - attr(*, \"label\")= chr \"This is the variable label for x\"  # check the factor levels unique(dicho_df$dicho_x) #> [1] Agree    Disagree #> Levels: Agree Disagree  # ----------------------------------------------------------------------------  # function also works with factors dicho_df <- df %>%   dplyr::mutate(     # convert variable to a factor     factor_x = haven::as_factor(x),     # convert the factor to a dichotomous factor     dicho_x = make_dicho(factor_x)   )  # check the updated dataset dicho_df #> # A tibble: 6 × 5 #>   x                     y                     z                 factor_x dicho_x #>   <dbl+lbl>             <dbl+lbl>             <dbl+lbl>         <fct>    <fct>   #> 1 3 [Somewhat agree]    2 [Agree]             3 [Somewhat agre… Somewha… Agree   #> 2 4 [Somewhat disagree] 4 [Somewhat disagree] 2 [Agree]         Somewha… Disagr… #> 3 2 [Agree]             6 [Strongly disagree] 1 [Strongly agre… Agree    Agree   #> 4 1 [Strongly agree]    1 [Strongly agree]    4 [Somewhat disa… Strongl… Agree   #> 5 5 [Disagree]          4 [Somewhat disagree] 3 [Somewhat agre… Disagree Disagr… #> 6 6 [Strongly disagree] 5 [Disagree]          6 [Strongly disa… Strongl… Disagr…  # Check the attributes attributes(dicho_df$dicho_x) #> $levels #> [1] \"Agree\"    \"Disagree\" #>  #> $class #> [1] \"factor\" #>  #> $transformation #> Converting 'factor_x' to a dichotomous factor with 'Agree' as the reference level #>  #> $label #> [1] \"This is the variable label for x\" #>  # another way of checking the attributes str(dicho_df$dicho_x) #>  Factor w/ 2 levels \"Agree\",\"Disagree\": 1 2 1 1 2 2 #>  - attr(*, \"transformation\")= 'glue' chr \"Converting 'factor_x' to a dichotomous factor with 'Agree' as the reference level\" #>  - attr(*, \"label\")= chr \"This is the variable label for x\"  # check the factor levels unique(dicho_df$dicho_x) #> [1] Agree    Disagree #> Levels: Agree Disagree  # ---------------------------------------------------------------------------- # function also works inside dplyr::across()  # Create new columns using `across()` dicho_df <- df %>%   dplyr::mutate(     # use this example if you don't want to flip the factor levels     dplyr::across(       x:z,       make_dicho,       .names = \"dicho_{col}\"     ),     # if you want to flip the factor levels, follow this example     dplyr::across(       x:z,       ~make_dicho(., flip_levels = TRUE),       .names = \"dicho_flipped_{col}\"     )   ) # show that the function worked properly by creating two new sets of variables dicho_df #> # A tibble: 6 × 9 #>   x                     y        z       dicho_x dicho_y dicho_z dicho_flipped_x #>   <dbl+lbl>             <dbl+lb> <dbl+l> <fct>   <fct>   <fct>   <fct>           #> 1 3 [Somewhat agree]    2 [Agre… 3 [Som… Agree   Agree   Agree   Agree           #> 2 4 [Somewhat disagree] 4 [Some… 2 [Agr… Disagr… Disagr… Agree   Disagree        #> 3 2 [Agree]             6 [Stro… 1 [Str… Agree   Disagr… Agree   Agree           #> 4 1 [Strongly agree]    1 [Stro… 4 [Som… Agree   Agree   Disagr… Agree           #> 5 5 [Disagree]          4 [Some… 3 [Som… Disagr… Disagr… Agree   Disagree        #> 6 6 [Strongly disagree] 5 [Disa… 6 [Str… Disagr… Disagr… Disagr… Disagree        #> # ℹ 2 more variables: dicho_flipped_y <fct>, dicho_flipped_z <fct>  # show the underlying structure of the entire df str(dicho_df) #> tibble [6 × 9] (S3: tbl_df/tbl/data.frame) #>  $ x              : dbl+lbl [1:6] 3, 4, 2, 1, 5, 6 #>    ..@ labels: Named num [1:6] 1 2 3 4 5 6 #>    .. ..- attr(*, \"names\")= chr [1:6] \"Strongly agree\" \"Agree\" \"Somewhat agree\" \"Somewhat disagree\" ... #>    ..@ label : chr \"This is the variable label for x\" #>  $ y              : dbl+lbl [1:6] 2, 4, 6, 1, 4, 5 #>    ..@ labels: Named num [1:6] 1 2 3 4 5 6 #>    .. ..- attr(*, \"names\")= chr [1:6] \"Strongly agree\" \"Agree\" \"Somewhat agree\" \"Somewhat disagree\" ... #>    ..@ label : chr \"This is the variable label for y\" #>  $ z              : dbl+lbl [1:6] 3, 2, 1, 4, 3, 6 #>    ..@ labels: Named num [1:6] 1 2 3 4 5 6 #>    .. ..- attr(*, \"names\")= chr [1:6] \"Strongly agree\" \"Agree\" \"Somewhat agree\" \"Somewhat disagree\" ... #>    ..@ label : chr \"This is the variable label for z\" #>  $ dicho_x        : Factor w/ 2 levels \"Agree\",\"Disagree\": 1 2 1 1 2 2 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'x' to a dichotomous factor with 'Agree' as the reference level\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for x\" #>  $ dicho_y        : Factor w/ 2 levels \"Agree\",\"Disagree\": 1 2 2 1 2 2 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'y' to a dichotomous factor with 'Agree' as the reference level\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for y\" #>  $ dicho_z        : Factor w/ 2 levels \"Agree\",\"Disagree\": 1 1 1 2 1 2 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'z' to a dichotomous factor with 'Agree' as the reference level\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for z\" #>  $ dicho_flipped_x: Factor w/ 2 levels \"Disagree\",\"Agree\": 2 1 2 2 1 1 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'x' to a dichotomous factor and reordering the factor levels so that 'Disagree' is the reference level\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for x\" #>  $ dicho_flipped_y: Factor w/ 2 levels \"Disagree\",\"Agree\": 2 1 1 2 1 1 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'y' to a dichotomous factor and reordering the factor levels so that 'Disagree' is the reference level\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for y\" #>  $ dicho_flipped_z: Factor w/ 2 levels \"Disagree\",\"Agree\": 2 2 2 1 2 1 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'z' to a dichotomous factor and reordering the factor levels so that 'Disagree' is the reference level\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for z\"  # show how the levels are flipped when \"flip_levels = TRUE\" levels(dicho_df$dicho_x) #> [1] \"Agree\"    \"Disagree\" levels(dicho_df$dicho_flipped_x) #> [1] \"Disagree\" \"Agree\""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/num_rev.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse a numeric function — num_rev","title":"Reverse a numeric function — num_rev","text":"Reverse numeric variable maintaining variable value labels available. Also adds attribute describing transformation original variable underwent.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/num_rev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse a numeric function — num_rev","text":"","code":"num_rev(x)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/num_rev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse a numeric function — num_rev","text":"x vector class haven_labelled numeric","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/num_rev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse a numeric function — num_rev","text":"","code":"library(dplyr) library(labelled) library(adlgraphs) # create fake data df <- tibble::tibble(   w = sample(1:4, 10, replace = TRUE),   x = sample(1:4, 10, replace = TRUE),   y = sample(1:4, 10, replace = TRUE),   z = sample(1:4, 10, replace = TRUE) ) %>%   # add value labels to x and y but not z to see what happens with no labels   labelled::set_value_labels(     x = c(`Strongly agree` = 1,           `Somewhat agree` = 2,           `Somewhat disagree` = 3,           `Strongly disagree` = 4),     y = c(`Strongly agree` = 1,           `Somewhat agree` = 2,           `Somewhat disagree` = 3,           `Strongly disagree` = 4),   ) %>%   # set variable labels to x and z   labelled::set_variable_labels(     x = \"This is the variable label for x\",     z = \"This is the variable label for z\"   )   rev_df <- df %>% mutate(rev_w = num_rev(w))  head(rev_df) #> # A tibble: 6 × 5 #>       w x                     y                         z rev_w #>   <int> <int+lbl>             <int+lbl>             <int> <dbl> #> 1     1 2 [Somewhat agree]    3 [Somewhat disagree]     3     4 #> 2     3 1 [Strongly agree]    3 [Somewhat disagree]     3     2 #> 3     4 1 [Strongly agree]    2 [Somewhat agree]        4     1 #> 4     3 1 [Strongly agree]    3 [Somewhat disagree]     4     2 #> 5     1 3 [Somewhat disagree] 1 [Strongly agree]        2     4 #> 6     2 4 [Strongly disagree] 1 [Strongly agree]        3     3  str(rev_df) #> tibble [10 × 5] (S3: tbl_df/tbl/data.frame) #>  $ w    : int [1:10] 1 3 4 3 1 2 3 3 3 4 #>  $ x    : int+lbl [1:10] 2, 1, 1, 1, 3, 4, 3, 1, 2, 2 #>    ..@ labels: Named int [1:4] 1 2 3 4 #>    .. ..- attr(*, \"names\")= chr [1:4] \"Strongly agree\" \"Somewhat agree\" \"Somewhat disagree\" \"Strongly disagree\" #>    ..@ label : chr \"This is the variable label for x\" #>  $ y    : int+lbl [1:10] 3, 3, 2, 3, 1, 1, 4, 1, 2, 2 #>    ..@ labels: Named int [1:4] 1 2 3 4 #>    .. ..- attr(*, \"names\")= chr [1:4] \"Strongly agree\" \"Somewhat agree\" \"Somewhat disagree\" \"Strongly disagree\" #>  $ z    : int [1:10] 3 3 4 4 2 3 1 2 3 3 #>   ..- attr(*, \"label\")= chr \"This is the variable label for z\" #>  $ rev_w: num [1:10] 4 2 1 2 4 3 2 2 2 1 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Reversing 'w'\""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/pct_conv.html","id":null,"dir":"Reference","previous_headings":"","what":"Make proper percent labels — pct_conv","title":"Make proper percent labels — pct_conv","text":"function wrapper around common data transformation done every time make frequency plot","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/pct_conv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make proper percent labels — pct_conv","text":"","code":"pct_conv(data, x = pct)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/pct_conv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make proper percent labels — pct_conv","text":"data data frame vector. Can left blank used piping x variable want convert percentage. value pct default always pct.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/pct_conv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make proper percent labels — pct_conv","text":"","code":"library(tibble) library(dplyr) library(labelled) library(haven)  # create the fake data df <- tibble::tribble(   ~x, ~y, ~z,   3, 2, 3,   4, 4, 2,   2, 6, 1,   1, 1, 4,   5, 4, 3,   6, 5, 6 )  df %>%   count(x) %>%   mutate(pct = prop.table(n)) %>%   pct_conv() #> # A tibble: 6 × 4 #>       x     n   pct pct_lab #>   <dbl> <int> <dbl> <chr>   #> 1     1     1  16.7 17%     #> 2     2     1  16.7 17%     #> 3     3     1  16.7 17%     #> 4     4     1  16.7 17%     #> 5     5     1  16.7 17%     #> 6     6     1  16.7 17%"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/pivot_longer_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot data from wide to long with value labels — pivot_longer_values","title":"Pivot data from wide to long with value labels — pivot_longer_values","text":"function wrapper around pivot_longer. function operates pretty much exact way uses variable labels variables specified cols make new value labels new variable created names_to variable.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/pivot_longer_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot data from wide to long with value labels — pivot_longer_values","text":"","code":"pivot_longer_values(data, cols, names_to, values_to)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/pivot_longer_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot data from wide to long with value labels — pivot_longer_values","text":"data data frame pivot. cols <tidy-select> Columns pivot longer format. names_to character vector specifying new column columns create information stored column names data specified cols. length 0, NULL supplied, columns created. length 1, single column created contain column names specified cols. length >1, multiple columns created. case, one names_sep names_pattern must supplied specify column names split. also two additional character values can take advantage : NA discard corresponding component column name. \".value\" indicates corresponding component column name defines name output column containing cell values, overriding values_to entirely. values_to string specifying name column create data stored cell values. names_to character containing special .value sentinel, value ignored, name value column derived part existing column names.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/scale_adl.html","id":null,"dir":"Reference","previous_headings":"","what":"ADL color scale — scale_adl","title":"ADL color scale — scale_adl","text":"Create sequential, diverging, categorical color scales using official ADL colors.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/scale_adl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ADL color scale — scale_adl","text":"","code":"scale_adl(   type = \"categorical\",   palette = \"base\",   aesthetic = c(\"fill\", \"color\"),   n,   direction = \"original\",   legend_order = \"original\",   legend_title = NULL,   wrap_legend_labels = NULL,   ... )"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/scale_adl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ADL color scale — scale_adl","text":"type character string indicating type color palette. two options: Categorical used diverging discrete palettes. Sequential used sequential palettes. palette character string indicating name palette (e.g., \"likert_6\"). info see different color palettes available, check adl_palettes. aesthetic Character string vector character strings listing name(s) aesthetic(s) scale works . can useful, example, apply colour settings colour fill aesthetics time, via aesthetic = c(\"colour\", \"fill\") n number colors. direction character string indicating order colors reversed. two values: \"original\" keep original order colors \"reverse\" flips order colors legend_order character string indicating order colors labels legend reversed. Currently two options: \"original\" keeps original order legend \"reverse\" flips order legend legend_title character string indicating title legend . three options : legend_title left blank. happens title scale taken first mapping used aesthetic legend_title = \"none\" happens title removed legend legend_title = \"string\" happens legend title becomes whatever string (case title \"string\") wrap_legend_labels Determine number characters per line labels. Uses label_wrap() scales::label_wrap() wrap text across multiple lines. left blank, defaults NULL wrap labels . ... additional arguments pass scale_fill_manual","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/scale_adl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ADL color scale — scale_adl","text":"function scale_adl() created survey data.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme for coefficient plots — theme_coef","title":"Theme for coefficient plots — theme_coef","text":"function creates theme coefficient plots.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme for coefficient plots — theme_coef","text":"","code":"theme_coef(base_size = 12, grid_x_only = TRUE, ...)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme for coefficient plots — theme_coef","text":"base_size Base font size, given pts. Also controls spacing graph. grid_x_only Logical. Determines x-axis grid lines (vertical lines) appear. FALSE, default, grid lines appear. TRUE, x-axis grid lines appear y-axis grid lines disappear. ... arguments passed onto theme_default().","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default theme — theme_default","title":"Default theme — theme_default","text":"function creates default theme ADL theme functions built . functions similarly theme_gray, default ggplot2 themes built theme_gray.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default theme — theme_default","text":"","code":"theme_default(   base_size = 12,   base_family = \"L\",   base_line_size = base_size/24,   base_rect_size = base_size/24,   legend_position = \"right\",   axis_text = TRUE,   axis_text_x = TRUE,   axis_text_y = TRUE,   grid = TRUE,   grid_x_only = FALSE,   grid_y_only = FALSE,   grid_major = TRUE,   grid_minor = TRUE,   grid_major_x = TRUE,   grid_major_y = TRUE,   grid_minor_x = TRUE,   grid_minor_y = TRUE )"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default theme — theme_default","text":"base_size Base font size, given pts. Also controls spacing graph. base_family Base font family. Default Lato. base_line_size Base size line elements. base_rect_size Base size rect elements. legend_position position legend. Options : \"left\", \"right\", \"top\", \"bottom\", \"none\". \"none\" removes legend. \"right\" default. axis_text Logical. Determines axes labels. TRUE, default, axes labelled. FALSE, neither axis labelled. Note, controls axes. want remove one axis, use axis_text_x axis_text_y. axis_text_x Logical. Determines x-axis labels. TRUE, default, x-axis labels shown. FALSE, x-axis labels removed plot. axis_text_y Logical. Determines y-axis labels. TRUE, default, y-axis labels shown. FALSE, y-axis labels removed plot. grid Logical. Determines grid lines appear. TRUE, default, grid lines appear. FALSE, grid lines disappear. grid_x_only Logical. Determines x-axis grid lines (vertical lines) appear. FALSE, default, grid lines appear. TRUE, x-axis grid lines appear y-axis grid lines disappear. grid_y_only Logical. Determines y-axis grid lines (horizontal lines) appear. FALSE, default, grid lines appear. TRUE, y-axis grid lines appear  x-axis grid lines disppear. grid_major Logical. Determines major grid lines appear. TRUE, default, major grid lines appear. FALSE, major grid lines disappear. grid_minor Logical. Determines minor grid lines appear. TRUE, default, minor grid lines appear. FALSE, minor grid lines disappear. grid_major_x Logical. Determines major x-axis grid lines appear. TRUE, default, major x-axis grid lines appear. FALSE, major x-axis grid lines disappear. grid_major_y Logical. Determines major y-axis grid lines appear. TRUE, default, major y-axis grid lines appear. FALSE, major t-axis grid lines disappear. grid_minor_x Logical. Determines minor x-axis grid lines appear. TRUE, default, minor x-axis grid lines appear. FALSE, minor x-axis grid lines disappear. grid_minor_y Logical. Determines minor y-axis grid lines appear. TRUE, default, minor y-axis grid lines appear. FALSE, minor t-axis grid lines disappear.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_h_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme for non-stacked horizontal bar plots — theme_h_bar","title":"Theme for non-stacked horizontal bar plots — theme_h_bar","text":"function creates theme non-stacked horizontal bar plots.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_h_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme for non-stacked horizontal bar plots — theme_h_bar","text":"","code":"theme_h_bar(   base_size = 12,   legend_position = \"none\",   axis_text_x = FALSE,   grid = FALSE,   ... )"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_h_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme for non-stacked horizontal bar plots — theme_h_bar","text":"base_size Base font size, given pts. Also controls spacing graph. legend_position position legend. Options : \"left\", \"right\", \"top\", \"bottom\", \"none\". \"none\" removes legend. \"none\" default. axis_text_x Logical. Determines x-axis labels. FALSE, default, x-axis labels removed. TRUE, x-axis labels shown. grid Logical. Determines grid lines appear. FALSE, default, grid lines disappear. TRUE, grid lines appear. ... arguments passed onto theme_default().","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_h_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme for horizontal stacked bar plots — theme_h_stack","title":"Theme for horizontal stacked bar plots — theme_h_stack","text":"function creates theme horizontally stacked bar plots.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_h_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme for horizontal stacked bar plots — theme_h_stack","text":"","code":"theme_h_stack(   base_size = 12,   legend_position = \"top\",   axis_text = FALSE,   grid = FALSE,   ... )"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_h_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme for horizontal stacked bar plots — theme_h_stack","text":"base_size Base font size, given pts. Also controls spacing graph. legend_position position legend. Options : \"left\", \"right\", \"top\", \"bottom\", \"none\". \"none\" removes legend. \"top\" default. axis_text Logical. Determines axes labels. FALSE,  default, neither axis labelled. TRUE, axes labelled. grid Logical. Determines grid lines appear. FALSE, default, grid lines disappear. TRUE, grid lines appear. ... arguments passed onto theme_default().","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_v_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme for vertical non-stacked bar plots — theme_v_bar","title":"Theme for vertical non-stacked bar plots — theme_v_bar","text":"function creates theme non-stacked vertical bar plots","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_v_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme for vertical non-stacked bar plots — theme_v_bar","text":"","code":"theme_v_bar(   base_size = 12,   legend_position = \"none\",   axis_text_y = FALSE,   grid = FALSE,   ... )"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_v_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme for vertical non-stacked bar plots — theme_v_bar","text":"base_size Base font size, given pts. Also controls spacing graph. legend_position position legend. Options : \"left\", \"right\", \"top\", \"bottom\", \"none\". \"none\" removes legend. \"none\" default. axis_text_y Logical. Determines y-axis labels. FALSE, default, y-axis labels removed. TRUE, y-axis labels shown. grid Logical. Determines grid lines appear. FALSE, default, grid lines disappear. TRUE, grid lines appear. ... arguments passed onto theme_default().","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/write_word_table.html","id":null,"dir":"Reference","previous_headings":"","what":"This mainly an internal package but can be used externally — write_word_table","title":"This mainly an internal package but can be used externally — write_word_table","text":"mainly internal package can used externally","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/write_word_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This mainly an internal package but can be used externally — write_word_table","text":"","code":"write_word_table(x, doc)"}]
