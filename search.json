[{"path":"https://jdenn0514.github.io/adlgraphs/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 adlgraphs authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/articles/data_transformations.html","id":"num_rev","dir":"Articles","previous_headings":"","what":"num_rev()","title":"data_transformations","text":"num_rev() designed forcats::fct_rev() mind. However, instead operating factors, num_rev() operates numeric vectors. Let’s take look operates practice. , let’s look variable top data set test_data. can see, survey respondents saw positively valanced statement, “feel comfortable buying products Israel”, values ranging 1 4 1 = Strongly agree 4 = Strongly disagree. survey research, often reverse variable. primarily done two reasons. first want flip valence question. One reason might case wanted create index summing variables. statements negatively valanced, may best interest keep value labels reverse valance top can now interpreted “feel comfortable buying products Israel.” Since value labels don’t change, people previously classified “Strongly agree” now going classified “Strongly disagree”, etc. second reason one might reverse values, change direction scale. example, values top increase, one’s level disagreement. might want reverse values now 1 = “Strongly disagree” 4 = “Strongly agree”, thus higher number means agreement. method flip valance question, people originally classified “Strongly agree” still going classified “Strongly agree”. Put another way, question isn’t changing therefore people’s responses aren’t changing. thing changes value associated response. num_rev() designed second goal mind. Normally simply reversing values subtracting , underlying metadata attributes lost. result, reverse values, update value labels set variable label . really time consuming. purpose num_rev() fix automating process reversing numeric vector, maintaining variable value labels. addition, function adds new attribute called transformation describes data transformation used create variable. ’m now going show function action. can see values flipped, value labels respondent . can see , variable labels also . means thing really changed, values. Now ’s clear function doesn’t , let’s try manually . First, let’s try just subtracting 5 top. can see attributes stripped. means need add value variable labels variable. , ’ll use haven::labelled() function. easier using labelled::val_labels() labelled::var_label() leverage existing value variable labels top. However, setting value labels, use rev() reverse . Now know manually, think ’s clear using num_rev() much easier.","code":"str(test_data$top) #>  dbl+lbl [1:250] 4, 3, 2, 4, 4, 2, 2, 2, 4, 2, 2, 2, 3, 3, 2, 4, 4, 4, 4, 3... #>  @ label        : chr \"An ideal society requires some groups to be on top and others to be on the bottom\" #>  @ format.spss  : chr \"F40.0\" #>  @ display_width: int 5 #>  @ labels       : Named num [1:4] 1 2 3 4 #>   ..- attr(*, \"names\")= chr [1:4] \"Strongly agree\" \"Somewhat agree\" \"Somewhat disagree\" \"Strongly disagree\" new_df <- test_data %>%    # let's make a new variable with the num_rev function   mutate(top_rev = num_rev(top)) %>%    # keep only these two variables   select(top_rev, top)  head(new_df) #> # A tibble: 6 × 2 #>   top_rev               top                   #>   <dbl+lbl>             <dbl+lbl>             #> 1 1 [Strongly disagree] 4 [Strongly disagree] #> 2 2 [Somewhat disagree] 3 [Somewhat disagree] #> 3 3 [Somewhat agree]    2 [Somewhat agree]    #> 4 1 [Strongly disagree] 4 [Strongly disagree] #> 5 1 [Strongly disagree] 4 [Strongly disagree] #> 6 3 [Somewhat agree]    2 [Somewhat agree] test_data %>%    # let's make a new variable with the num_rev function   mutate(top_rev = num_rev(top)) %>%    # keep only these two variables   select(top_rev, top) %>%    # get the variable labels for both variables   get_variable_labels() #> $top_rev #> [1] \"An ideal society requires some groups to be on top and others to be on the bottom\" #>  #> $top #> [1] \"An ideal society requires some groups to be on top and others to be on the bottom\" new_df <- test_data %>%    # reverse the variable   mutate(top_rev = 5 - top)  # check attributes attributes(new_df$top_rev) #> NULL new_df <- test_data %>%    mutate(     top_rev = labelled(       x = 5 - top,       labels = c(         `Strongly disagree` = 1,         `Somewhat disagree` = 2,         `Somewhat agree` = 3,         `Strongly agree` = 4       ),       label = \"An ideal society requires some groups to be on top and others to be on the bottom\"     )   )  attributes(new_df$top_rev) #> $labels #> Strongly disagree Somewhat disagree    Somewhat agree    Strongly agree  #>                 1                 2                 3                 4  #>  #> $label #> [1] \"An ideal society requires some groups to be on top and others to be on the bottom\" #>  #> $class #> [1] \"haven_labelled\" \"vctrs_vctr\"     \"double\" new_df <- test_data %>%    mutate(     top_rev = labelled(       x = 5 - top,       labels = val_labels(test_data$top) %>% rev(),       label = var_label(test_data$top)     )   )  attributes(new_df$top_rev) #> $labels #> Strongly disagree Somewhat disagree    Somewhat agree    Strongly agree  #>                 4                 3                 2                 1  #>  #> $label #> [1] \"An ideal society requires some groups to be on top and others to be on the bottom\" #>  #> $class #> [1] \"haven_labelled\" \"vctrs_vctr\"     \"double\""},{"path":"https://jdenn0514.github.io/adlgraphs/articles/how_to_use_adl_bar_plot.html","id":"cars-bar-plot-data-visualization-and-style-guide","dir":"Articles","previous_headings":"","what":"CAR’s bar plot data visualization and style guide","title":"How to Use the `adl_bar_plots` function","text":"general rules apply bar plots: title two lines main takeaway plot. Subtitle can convey additional information available rest plot. example, can help clarify plot demonstrating. Use exact question labeling whenever possible. often used axis labels can title. data point bar demonstrating directly labelled either inside outside bar. Don’t include grid lines. unnecessary since labels already labelled. Don’t label axes necessary. comes deciding direction plot, just use judgement looks best. plots used website require width 1080px comparing two bars, may better just make horizontal. However, ’s important keep aesthetic consistent throughout report presentation. instance, regularly using vertical bar plots, keep using even might look little better horizontally. change orientation may confuse readers think demonstrating something different.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/articles/how_to_use_adl_bar_plot.html","id":"simple-bar-plots","dir":"Articles","previous_headings":"CAR’s bar plot data visualization and style guide","what":"Simple bar plots","title":"How to Use the `adl_bar_plots` function","text":"Simple bar plots ones comparing two variables, x y axis variables. use demonstrating frequencies well means. Additionally, can vertical horizontal. Now let’s look action. simple vertical frequency plot. doesn’t subtitle, rest written still applies. bar directly labelled percentage. aren’t grid lines since bars labelled directly plot title contains main takeaway (main takeaway) y-axis title labeled since columns already labeled data % symbols. x-axis title exact question wording. column directly labeled outside bar data value represents % symbol. Lastly, order bars reordered percentage since values x-axis already inherent order. Furthermore, “Strongly disagree” appears far left “Strongly agree” appears far right. (Note: values x-axis specific order , reorder percentage.)  Now let’s take look two simple vertical mean plots. plot left shows average score “American Conspiracy Thinking Scale” across educational groups. American Conspiracy Thinking Scale shows average response score across four statements. plot right shows average number tropes endorsed ADL Index. plots show data label inside bottom bar, white surrounding number improve visibility plots confidence intervals demonstrating statistical significance plot right y-axis labelled. one bars “Tropes Endorsed” inside tells people numbers mean. ideal showing something easy, like average number actions, statements, tropes, etc.   Now let’s take look relatively simple horizontal bar plot. principles laid previously apply well, however, differences. example, take plot . looking percentage people education level agree specific statement. Normally show stacked plot response options, occasionally want something simpler. graph vertical, easier read done horizontally. Namely, people don’t turn head read axes. notes: frequency plots horizontal, percentage labels go outside columns right. , x-axis reordered educational levels inherent order . However, something without inherent order, like race/ethnicity, reorder columns based percentage top bar highest bottom bar lowest. y-axis title obvious looking education levels. concept applies demographic groups. include titles necessary. super necessary, graph wrapped y-axis labels (line breaks), makes graph look symmetrical keeps x-axis title centered. adding line breaks try keep three maximum whenever possible. x-axis title added clarify looking .","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/articles/how_to_use_adl_bar_plot.html","id":"dodged-bar-plots","dir":"Articles","previous_headings":"CAR’s bar plot data visualization and style guide","what":"Dodged bar plots","title":"How to Use the `adl_bar_plots` function","text":"don’t use dodged bar plots frequently, important understand use . use dodged bar plots demonstrate frequencies well mean plots. typical example compare level agreement various statements among different groups people. example, ’ll look people without college degree differ much agree statements designed measure conspiratorial mindset. two images show graph one uses legend identify group associated bar uses colored text title identify groups. Coloring text title subtitle indicate groups associated bars typically better including legend makes plot less cluttered. using legend, make sure aligned direction bars order. can see left plot . Since plot horizontal bars , legend right legend items top . Furthermore, order legend items order bars. Another note: Since statements bit long, made plot horizontal wrapped ove three lines. Typically, anything two three words made horizontal bar plot. relates wrapping text, use judgement. Make sure text easy read, doesn’t overlap , relative sizes bars easy see.   Occasionally, also vertically dodged bar plots. mentioned , ’ll use axis labels large. example, comparing percentage people endorsing different numbers tropes/statements. Another example, comparing average score two measures across group. ’ll demonstrate examples .","code":"test_data %>%    mutate(acts_avg = structure(acts_avg, label = \"American Conspiracy Thinking Scale\")) %>%    pivot_longer_values(     cols = c(acts_avg, sdo_avg),     names_to = \"variables\",     values_to = \"score\"   )  #> # A tibble: 500 × 28 #>    resp_id   wts edu          edu_f2 pid_f3  top     inferior dominate deserving #>      <int> <dbl> <dbl+lbl>    <fct>  <dbl+l> <dbl+l> <dbl+lb> <dbl+lb> <dbl+lbl> #>  1       1 0.937 4 [Bachelor… At Le… 1 [Dem… 4 [Str… 4 [Stro… 1 [Stro… 1 [Stron… #>  2       1 0.937 4 [Bachelor… At Le… 1 [Dem… 4 [Str… 4 [Stro… 1 [Stro… 1 [Stron… #>  3       2 0.303 5 [Graduate… At Le… 2 [Ind… 3 [Som… 3 [Some… 3 [Some… 3 [Somew… #>  4       2 0.303 5 [Graduate… At Le… 2 [Ind… 3 [Som… 3 [Some… 3 [Some… 3 [Somew… #>  5       3 0.937 4 [Bachelor… At Le… 1 [Dem… 2 [Som… 3 [Some… 2 [Some… 2 [Somew… #>  6       3 0.937 4 [Bachelor… At Le… 1 [Dem… 2 [Som… 3 [Some… 2 [Some… 2 [Somew… #>  7       4 0.408 3 [Some Col… No Co… 2 [Ind… 4 [Str… 3 [Some… 1 [Stro… 1 [Stron… #>  8       4 0.408 3 [Some Col… No Co… 2 [Ind… 4 [Str… 3 [Some… 1 [Stro… 1 [Stron… #>  9       5 0.627 5 [Graduate… At Le… 3 [Rep… 4 [Str… 4 [Stro… 1 [Stro… 1 [Stron… #> 10       5 0.627 5 [Graduate… At Le… 3 [Rep… 4 [Str… 4 [Stro… 1 [Stro… 1 [Stron… #> # ℹ 490 more rows #> # ℹ 19 more variables: special <dbl+lbl>, harder <dbl+lbl>, #> #   controlled <dbl+lbl>, small <dbl+lbl>, run <dbl+lbl>, big_events <dbl+lbl>, #> #   accept_hamas <dbl+lbl>, accept_isr <dbl+lbl>, dislike_jews <dbl+lbl>, #> #   stick_together <dbl+lbl>, values <dbl+lbl>, head <dbl+lbl>, #> #   loyal <dbl+lbl>, business_power <dbl+lbl>, wall_street <dbl+lbl>, #> #   trad_n <dbl>, edu_f <fct>, variables <chr+lbl>, score <dbl>"},{"path":"https://jdenn0514.github.io/adlgraphs/articles/how_to_use_adl_bar_plot.html","id":"stacked-frequency-bar-plots","dir":"Articles","previous_headings":"CAR’s bar plot data visualization and style guide > Dodged bar plots","what":"Stacked frequency bar plots","title":"How to Use the `adl_bar_plots` function","text":"one common bar plots CAR uses. example typical use case","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jacob Dennen. Author, maintainer.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dennen J (2024). adlgraphs: Create Graphs ADL Style Branding. R package version 0.2.0,  https://jdenn0514.github.io/adlgraphs/, https://github.com/JDenn0514/adlgraphs.","code":"@Manual{,   title = {adlgraphs: Create Graphs with ADL Style and Branding},   author = {Jacob Dennen},   year = {2024},   note = {R package version 0.2.0,  https://jdenn0514.github.io/adlgraphs/},   url = {https://github.com/JDenn0514/adlgraphs}, }"},{"path":[]},{"path":"https://jdenn0514.github.io/adlgraphs/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Create Graphs with ADL Style and Branding","text":"goal adlgraphs help ensure data visualizations produced Center Antisemitism Research (CAR) Anti-Defamation League (ADL) consistent ADL’s brand guidelines CAR’s data visualizations consistent cohesive.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create Graphs with ADL Style and Branding","text":"can install development version adlgraphs GitHub :","code":"# install.packages(\"pak\") pak::pak(\"JDenn0514/adlgraphs\")"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_bar_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Create bar plots in ADL's style — adl_bar_plots","title":"Create bar plots in ADL's style — adl_bar_plots","text":"function allows users create different types bar plots ADL's style. wrapper around geom_col, geom_text/,geom_label, geom_errorbar. function created standardize graphs produced CAR's team cut amount time takes make graphs.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_bar_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create bar plots in ADL's style — adl_bar_plots","text":"","code":"adl_bar_plots(   df,   x,   y,   col_label,   group = NULL,   fill = NULL,   direction = \"vertical\",   col_text_size = 3.25,   distance_from_col = 0.25,   freq_plot = TRUE,   position = NULL,   dodge_width = 0.8,   dodge_reverse = TRUE,   ... )"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_bar_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create bar plots in ADL's style — adl_bar_plots","text":"df dataframe tibble. can piped like normal ggplot function. x Variable goes x-axis. required. y Variable goes y-axis. required. col_label Variable provides values used labels plot. used geom_text geom_label group Explicitly set overall grouping variable. used stacked graphs dodged graphs. NULL, default, grouping variable used. Note: need set  data grouped . fill Set grouping variable inside bars colored. used stacked graphs dodged graphs. NULL, default, grouping variable used. Note: need set data grouped . direction character string indicating direction bars. two options: \"vertical\", default, bars vertical \"horizontal\" bars horizontal must set explicitly affects location text, labels, error bars. col_text_size size text inside/top columns. Default 3.25. distance_from_col far labels bars freq plots far bottom bar mean plots. freq_plot Logical. Determines frequency plot. TRUE, default, graph styled frequency plot bar labels appearing outside bars. FALSE, graph styled mean plot labels appearing. position character string determining plot handles grouped graph. default NULL assumes grouping variable. set \"dodge\" get dodged plot. best used comparing two groups, especially add 100. set \"stacked\" get stacked plot. used comparing multiple statements likert scales things add 100. dodge_width adjusts width dodge plot. info check position_dodge. dodge_reverse Reverses order bars text dodge plot. info check position_dodge. ... Additional arguments passed theme_default","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_bar_plots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create bar plots in ADL's style — adl_bar_plots","text":"mentioned previously, function wrapper around various {ggplot2} functions order save time making simple bar plots, dodged bar plots, stacked bar plots. result, possible combine every element graph. like , recommend using actual geoms {ggplot2}. elements included serve purpose allow customize graphs look nice. Moreover, arguments created types graphs CAR produces, namely mean plots frequency plots.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_coef_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Create coefficient plots in ADL's style — adl_coef_plots","title":"Create coefficient plots in ADL's style — adl_coef_plots","text":"function allows users create coefficient plot ADL's style designed help reduce time takes make publication-ready graphs.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_coef_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create coefficient plots in ADL's style — adl_coef_plots","text":"","code":"adl_coef_plots(   df,   x = estimate,   y = value_label,   color = NULL,   facet = var_label,   facet_order = \"original\",   wrap_facet_labels = 50,   wrap_y_labels = 20,   x_intercept = 0,   point_size = 3.5,   line_width = 1,   position = NULL,   dodge_width = 0.6,   dodge_reverse = FALSE,   ... )"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_coef_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create coefficient plots in ADL's style — adl_coef_plots","text":"df dataframe tibble. can piped like normal ggplot function. x Variable goes x-axis. y Variable goes y-axis. color Set grouping variable color dots confidence intervals colored. NULL, default, grouping variable used. Note: need set data grouped facet Set variable want plot faceted. typically used instead color argument distinguish different variables values. Default var_label can set column object set df. Must set NULL remove faceting plot. facet_order character string indicating order variables graph faceted reversed . two options: \"original\" keep original order faceting variables \"reverse\" flips order faceting variables Note: change ordering values within facet y-axis, just reorders different facets. wrap_facet_labels Determine number characters per line facet labels. Uses label_wrap wrap text across multiple lines. left blank, defaults 50. wrap_y_labels Determine number characters per line y-axis labels. Uses label_wrap wrap text across multiple lines. left blank, defaults 20. x_intercept value x_intercept set. Default 0 exponentiated models set 1. set NULL x_intercept shown. point_size size dots plot. Default 3.5. line_width thickness lines. Default position character string determining plot handles grouped graph. default NULL assumes grouping variable. set \"dodge\", create dodged plot based variable supplied color. dodge_width adjusts width dodge plot. Default 0.6. info check position_dodge. dodge_reverse Logical. set TRUE, reverses order dots confidence intervals. Default FALSE. info check position_dodge. ... Additional arguments passed theme_coef()","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_coef_plots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create coefficient plots in ADL's style — adl_coef_plots","text":"function works best used conjunction get_coefficients(). adl_coef_plots() wrapper around geom_point, geom_linerange/ geom_vline. result, possible customize every aspect graph. like , recommend using actual geoms {ggplot2}. differentiate different variables different models, use facet color arguments like normally. However, just differentiating variables, using facet argument recommended makes easier distinguish different variables compare estimates values .","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Complete list of available adl official color palettes — adl_palettes","title":"Complete list of available adl official color palettes — adl_palettes","text":"list color palettes choose , preview directly console.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_palettes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complete list of available adl official color palettes — adl_palettes","text":"","code":"adl_palettes"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_palettes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Complete list of available adl official color palettes — adl_palettes","text":"list 9 color objects elements. primary Primary categorical color secondary Seconday categorical color tertiary Tertiary categorical color pid3 Palette partisanship/ideology (categorical) categorical Palette categorical data 7 groups (categorical) likert_6 Palette likert scales 6 response options (diverging) likert_4 Palette likert scales 4 response options (diverging) bluescale Blue scale color palette (sequential) grayscale Grayscale color palette (sequential)","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_palettes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Complete list of available adl official color palettes — adl_palettes","text":"Pretty print plot methods powered prismatic package. palette stored color object enact behaviour.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adl_palettes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Complete list of available adl official color palettes — adl_palettes","text":"","code":"adl_palettes$primary #> <colors> #> #14A2FCFF  adl_palettes$secondary #> <colors> #> #B0B1B3FF  adl_palettes$tertiary #> <colors> #> #E84C4CFF  adl_palettes$pid3 #> <colors> #> #14A2FCFF #60269EFF #E84C4CFF  adl_palettes$categorical #> <colors> #> #14A2FCFF #B0B1B3FF #E84C4CFF #0A1A50FF #FFE500FF #69DA78FF #60269EFF #FFA828FF  adl_palettes$likert_6 #> <colors> #> #0A1A50FF #005B98FF #14A2FCFF #DBDCDDFF #B0B1B3FF #595B60FF  adl_palettes$likert_4 #> <colors> #> #0A1A50FF #14A2FCFF #DBDCDDFF #595B60FF  adl_palettes$bluescale #> <colors> #> #0A1A50FF #E7E8EEFF  adl_palettes$grayscale #> NULL"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adlgraphs-package.html","id":null,"dir":"Reference","previous_headings":"","what":"adlgraphs: Create Graphs with ADL Style and Branding — adlgraphs-package","title":"adlgraphs: Create Graphs with ADL Style and Branding — adlgraphs-package","text":"package designed make easier folks CAR ADL make graphs. package contains different themes related various graph styles, guide colors use , various functions created related various graphs (mainly coefficient plots).","code":""},{"path":[]},{"path":"https://jdenn0514.github.io/adlgraphs/reference/adlgraphs-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"adlgraphs: Create Graphs with ADL Style and Branding — adlgraphs-package","text":"Maintainer: Jacob Dennen jdennen@adl.org","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/case_match_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"case_match with factor levels — case_match_fct","title":"case_match with factor levels — case_match_fct","text":"Recode variable using dplyr::case_match() syntax","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/case_match_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"case_match with factor levels — case_match_fct","text":"","code":"case_match_fct(.x, ..., .default = NULL)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/case_match_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"case_match with factor levels — case_match_fct","text":".x vector match . ... <dynamic-dots> sequence two-sided formulas: old_values ~ new_value. right hand side (RHS) determines output value values .x match left hand side (LHS). LHS must evaluate type vector .x. can length, allowing map multiple .x values RHS value. value repeated LHS, .e. value .x matches multiple cases, first match used. RHS inputs coerced common type. RHS input recycled size .x. .default value used values .x matched LHS inputs. NULL, default, NA used.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/case_match_fct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"case_match with factor levels — case_match_fct","text":"","code":"# import dplyr so we can use their starwars dataset library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union # create a vector with a variable label species <- starwars$species %>% structure(label = \"This is a variable label\")  new_species <- case_match_fct(   species,   \"Human\" ~ \"Humanoid\",   \"Droid\" ~ \"Robot\",   c(\"Wookiee\", \"Ewok\") ~ \"Hairy\",   .default = \"Other\" )  # now let's check to see that it added the transformation metadata and the #variable label str(new_species) #>  Factor w/ 4 levels \"Humanoid\",\"Robot\",..: 1 2 2 1 1 1 1 2 1 1 ... #>  - attr(*, \"label\")= chr \"This is a variable label\" #>  - attr(*, \"transformation\")= 'glue' chr \"Recoded 'species' as a factor and set the levels based on their order.\\nThe data transformation is as follows:\\\"| __truncated__  # now let's create a variable \"new_species\" and get the frequencies for it # we can see the frequencies are in the same order we applied. starwars %>%   dplyr::mutate(     new_species = case_match_fct(       species,       \"Human\" ~ \"Humanoid\",       \"Droid\" ~ \"Robot\",       c(\"Wookiee\", \"Ewok\") ~ \"Hairy\",       .default = \"Other\"     )   ) %>%   dplyr::count(new_species) #> # A tibble: 4 × 2 #>   new_species     n #>   <fct>       <int> #> 1 Humanoid       35 #> 2 Robot           6 #> 3 Hairy           3 #> 4 Other          43  # now let's do the same but with dplyr::case_match() # we can see that the frequencies are in alphabetical order starwars %>%   dplyr::mutate(     new_species = dplyr::case_match(       species,       \"Human\" ~ \"Humanoid\",       \"Droid\" ~ \"Robot\",       c(\"Wookiee\", \"Ewok\") ~ \"Hairy\",       .default = \"Other\"     )   ) %>%   dplyr::count(new_species) #> # A tibble: 4 × 2 #>   new_species     n #>   <chr>       <int> #> 1 Hairy           3 #> 2 Humanoid       35 #> 3 Other          43 #> 4 Robot           6"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/case_when_fct.html","id":null,"dir":"Reference","previous_headings":"","what":"case_when with factor levels — case_when_fct","title":"case_when with factor levels — case_when_fct","text":"Recode variable using dplyr::case_when() syntax","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/case_when_fct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"case_when with factor levels — case_when_fct","text":"","code":"case_when_fct(..., .default = NULL)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/case_when_fct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"case_when with factor levels — case_when_fct","text":"... <dynamic-dots> sequence two-sided formulas. left hand side (LHS) determines values match case. right hand side (RHS) provides replacement value. LHS inputs must evaluate logical vectors. RHS inputs coerced common type. inputs recycled common size. said, encourage LHS inputs size. Recycling mainly useful RHS inputs, might supply size 1 input recycled size LHS inputs. NULL inputs ignored. .default string. value used LHS inputs return either FALSE NA. NULL, default, NA used.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/case_when_fct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"case_when with factor levels — case_when_fct","text":"","code":"# load the dplyr library so we can use `mutate()` library(dplyr)  # let's use the `test_data` data set and convert `edu` to a dichotomous factor # of college degree vs no degree. I'll demonstrate this a few different ways new_data <- test_data %>%   mutate(     edu_f2 = case_when_fct(       edu %in% c(1:3) ~ \"No degree\",       # we can specify the other values explicitly like this       edu %in% c(4:5) ~ \"College degree\"     )   )  # we can see that the `edu_f2` has two levels and they are in the correct # and it attached the transformation metadata str(new_data$edu_f2) #>  Factor w/ 2 levels \"No degree\",\"College degree\": 2 2 2 1 2 1 1 1 1 2 ...  # another way of doing this is to indicate that when edu is less than 4 it # means no degree and when edu is above 3  it means college degree, like this new_data <- test_data %>%   mutate(     edu_f2 = case_when_fct(       edu < 4 ~ \"No degree\",       # we can specify the other values explicitly like this       edu > 3 ~ \"College degree\"     )   )  # let's check it again str(new_data$edu_f2) #>  Factor w/ 2 levels \"No degree\",\"College degree\": 2 2 2 1 2 1 1 1 1 2 ...  # yet another way to do it, is to use the `.default =` argument to specify # ALL other values not listed in the prior arguments new_data <- test_data %>%   mutate(     edu_f2 = case_when_fct(       edu < 4 ~ \"No degree\",       # we can specify the other values explicitly like this       .default = \"College degree\"     )   )  # let's check it again str(new_data$edu_f2) #>  Factor w/ 2 levels \"No degree\",\"College degree\": 2 2 2 1 2 1 1 1 1 2 ..."},{"path":"https://jdenn0514.github.io/adlgraphs/reference/clean_demos.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up demographic variables — clean_demos","title":"Clean up demographic variables — clean_demos","text":"function makes easier clean demographic data really works data set specific way. designed work ADL programs surveys work case variables listed found data.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/clean_demos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up demographic variables — clean_demos","text":"","code":"clean_demos(df)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/clean_demos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up demographic variables — clean_demos","text":"df dataframe tibble. can piped like normal ggplot function.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_all_freqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Export frequencies for a set of variables to a word doc. — get_all_freqs","title":"Export frequencies for a set of variables to a word doc. — get_all_freqs","text":"function uses get_freq_table() get frequencies set variables suppplied user. outputs frequencies word doc.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_all_freqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export frequencies for a set of variables to a word doc. — get_all_freqs","text":"","code":"get_all_freqs(df, x, group, wt, show_genpop, file_name)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_all_freqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export frequencies for a set of variables to a word doc. — get_all_freqs","text":"df object type data.frame tibble. piping df function, required. x vector variables want get frequencies . group character string. first grouping variable. wt character string. Add weighting variable want get weighted frequencies show_genpop Logical. column showing frequencies general population file_name character string specifying name file created frequencies file located. File must end .docx","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_coefficients.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tidied tibble of regression results — get_coefficients","title":"Create a tidied tibble of regression results — get_coefficients","text":"function created produce results similar find broom.helpers, changes. notably, main reason creating function, can standardize regression coefficients scaling mean-centering input data.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_coefficients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tidied tibble of regression results — get_coefficients","text":"","code":"get_coefficients(   model,   conf.level = 0.95,   standardize = FALSE,   n.sd = 2,   exponentiate = FALSE,   add_ss = TRUE,   add_labels = TRUE,   add_n = FALSE,   model_name = NULL )"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_coefficients.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tidied tibble of regression results — get_coefficients","text":"model model object created using either lm glm. Can also piped function. conf.level number 0 1 signifies width desired confidence interval. Default 0.95, corresponds 95% confidence interval. standardize Logical. TRUE, reports standardized regression coefficients scaling mean-centering input data. Default FALSE. n.sd Logical. standardize TRUE, determines number standard deviations used scale data. Default 2. exponentiate Logical. TRUE, reports exponentiated coefficients confidence intervals exponential models like logit Poisson models. quantity known odds ratio binary outcomes incidence rate ratio count models. Default FALSE. add_ss Logical. TRUE, default, new column created called ss gives \"Yes\" term statistically significant \"\" term statistically significant. add_labels Logical. TRUE adds variable value labels add_n Logical. true adds number observations per variable model_name character string adds new column titled model supplied character string rows. NULL, default, column created. useful comparing multiple models similar variable need clarify estimates associated model.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_coefficients.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a tidied tibble of regression results — get_coefficients","text":"function also takes advantage tidy_add_reference_rows/, tidy_add_term_labels/, tidy_add_n/ allow include reference row variable, underlying variable value labels, number observations.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_freq_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the frequencies as a GT table — get_freq_table","title":"Get the frequencies as a GT table — get_freq_table","text":"function creates GT table frequencies specified variable ability get frequencies one grouping variable. can used , created used get_all_freqs()`, function outputs frequencies set variables word doc.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_freq_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the frequencies as a GT table — get_freq_table","text":"","code":"get_freq_table(df, x, group, wt, show_genpop = FALSE)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_freq_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the frequencies as a GT table — get_freq_table","text":"df object type data.frame tibble. piping df function, required. x Either character string symbol. variable want get frequencies. group Either character string symbol. grouping variable. wt Weights. Add weighting variable want get weighted frequencies show_genpop Logical. column showing frequencies general population","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_freqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate weighted frequencies — get_freqs","title":"Calculate weighted frequencies — get_freqs","text":"Use function calculate simple weighted frequencies weighted grouped. can also specify grouping variable want calculate frequencies","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_freqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate weighted frequencies — get_freqs","text":"","code":"get_freqs(df, x, group, wt, cross_tab = FALSE)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_freqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate weighted frequencies — get_freqs","text":"df object type data.frame tibble. piping df function, required. x Either character string symbol. variable want get frequencies. group Either character string symbol. grouping variable. wt Weights. Add weighting variable want get weighted frequencies cross_tab Logical. group object supplied, table pivoted create make like crosstabs","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_freqs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate weighted frequencies — get_freqs","text":"x, group, wt arguments can either strings symbols (meaning can quotes quotes). benefit makes really easy iterate function list vector variables functions like map() purrr::map() walk() purrr::walk() found purrr package.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_freqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate weighted frequencies — get_freqs","text":"","code":"# load the package library(dplyr)  # Let's calculate the overall frequency for big_events get_freqs(test_data, big_events) #> # A tibble: 4 × 3 #>   big_events                n   pct #> * <dbl+lbl>             <int> <dbl> #> 1 1 [Strongly agree]       42 0.168 #> 2 2 [Somewhat agree]       78 0.312 #> 3 3 [Somewhat disagree]    65 0.26  #> 4 4 [Strongly disagree]    65 0.26   # it also works if x is a string get_means(test_data, \"big_events\") #> # A tibble: 1 × 6 #>    mean    sd     n std.error conf.low conf.high #>   <dbl> <dbl> <dbl>     <dbl>    <dbl>     <dbl> #> 1  2.61  1.05   250      0.07     2.48      2.74  # Let's do that again but add weights get_freqs(test_data, big_events, wt = wts) #> # A tibble: 4 × 3 #>   big_events                n   pct #> * <dbl+lbl>             <dbl> <dbl> #> 1 1 [Strongly agree]     42.1 0.174 #> 2 2 [Somewhat agree]     72.6 0.299 #> 3 3 [Somewhat disagree]  64.5 0.266 #> 4 4 [Strongly disagree]  63.5 0.262  # the wt argument can also be in quotes like this get_freqs(test_data, \"big_events\", wt = \"wts\") #> # A tibble: 4 × 3 #>   big_events                n   pct #> * <dbl+lbl>             <dbl> <dbl> #> 1 1 [Strongly agree]     42.1 0.174 #> 2 2 [Somewhat agree]     72.6 0.299 #> 3 3 [Somewhat disagree]  64.5 0.266 #> 4 4 [Strongly disagree]  63.5 0.262  # Now let's do the average score for different education levels get_freqs(test_data, big_events, edu_f, wts) #> # A tibble: 16 × 4 #> # Groups:   edu_f [4] #>    edu_f               big_events                n   pct #>  * <fct>               <dbl+lbl>             <dbl> <dbl> #>  1 High School or Less 1 [Strongly agree]     14.2 0.195 #>  2 High School or Less 2 [Somewhat agree]     28.9 0.397 #>  3 High School or Less 3 [Somewhat disagree]  19.2 0.264 #>  4 High School or Less 4 [Strongly disagree]  10.5 0.144 #>  5 Some College        1 [Strongly agree]     13.6 0.159 #>  6 Some College        2 [Somewhat agree]     21.9 0.256 #>  7 Some College        3 [Somewhat disagree]  24.1 0.282 #>  8 Some College        4 [Strongly disagree]  25.9 0.302 #>  9 Bachelor's Degree   1 [Strongly agree]      7.8 0.167 #> 10 Bachelor's Degree   2 [Somewhat agree]     11.8 0.255 #> 11 Bachelor's Degree   3 [Somewhat disagree]  10.4 0.225 #> 12 Bachelor's Degree   4 [Strongly disagree]  16.4 0.353 #> 13 Graduate Degree     1 [Strongly agree]      6.6 0.173 #> 14 Graduate Degree     2 [Somewhat agree]      9.9 0.261 #> 15 Graduate Degree     3 [Somewhat disagree]  10.8 0.284 #> 16 Graduate Degree     4 [Strongly disagree]  10.7 0.282  # it also works with quotes get_freqs(test_data, \"big_events\", \"edu_f\", \"wts\") #> # A tibble: 16 × 4 #> # Groups:   edu_f [4] #>    edu_f               big_events                n   pct #>  * <fct>               <dbl+lbl>             <dbl> <dbl> #>  1 High School or Less 1 [Strongly agree]     14.2 0.195 #>  2 High School or Less 2 [Somewhat agree]     28.9 0.397 #>  3 High School or Less 3 [Somewhat disagree]  19.2 0.264 #>  4 High School or Less 4 [Strongly disagree]  10.5 0.144 #>  5 Some College        1 [Strongly agree]     13.6 0.159 #>  6 Some College        2 [Somewhat agree]     21.9 0.256 #>  7 Some College        3 [Somewhat disagree]  24.1 0.282 #>  8 Some College        4 [Strongly disagree]  25.9 0.302 #>  9 Bachelor's Degree   1 [Strongly agree]      7.8 0.167 #> 10 Bachelor's Degree   2 [Somewhat agree]     11.8 0.255 #> 11 Bachelor's Degree   3 [Somewhat disagree]  10.4 0.225 #> 12 Bachelor's Degree   4 [Strongly disagree]  16.4 0.353 #> 13 Graduate Degree     1 [Strongly agree]      6.6 0.173 #> 14 Graduate Degree     2 [Somewhat agree]      9.9 0.261 #> 15 Graduate Degree     3 [Somewhat disagree]  10.8 0.284 #> 16 Graduate Degree     4 [Strongly disagree]  10.7 0.282  # if we want to pivot the results so they look like cross tabs, then we need # to set `cross_tab` to TRUE get_freqs(test_data, big_events, edu_f, wts, cross_tab = TRUE) #> # A tibble: 4 × 5 #>   big_events            `High School or Less` `Some College` `Bachelor's Degree` #> * <dbl+lbl>             <glue>                <glue>         <glue>              #> 1 1 [Strongly agree]    19.46% (n = 14.2)     15.93% (n = 1… 16.73% (n = 7.8)    #> 2 2 [Somewhat agree]    39.71% (n = 28.9)     25.64% (n = 2… 25.54% (n = 11.8)   #> 3 3 [Somewhat disagree] 26.39% (n = 19.2)     28.19% (n = 2… 22.45% (n = 10.4)   #> 4 4 [Strongly disagree] 14.44% (n = 10.5)     30.24% (n = 2… 35.28% (n = 16.4)   #> # ℹ 1 more variable: `Graduate Degree` <glue>  # you can also pipe in the `df` argument if you want to do some data # transformations before you calculate the means. For example, say you want # to compare the frequencies of `big_events` among people who agreed vs # disagreed with the variable `top`: test_data %>%   mutate(top_f2 = make_dicho(top)) %>%   get_freqs(trad_n, top_f2, wts) #> # A tibble: 28 × 4 #> # Groups:   top_f2 [2] #>    top_f2 trad_n     n    pct #>  * <fct>   <dbl> <dbl>  <dbl> #>  1 Agree       0  13.7 0.143  #>  2 Agree       1  13.5 0.141  #>  3 Agree       2  14.5 0.151  #>  4 Agree       3   9.7 0.101  #>  5 Agree       4   6.6 0.0685 #>  6 Agree       5   2.7 0.0279 #>  7 Agree       6   6.7 0.0700 #>  8 Agree       7   2.9 0.0305 #>  9 Agree       8   3.7 0.0387 #> 10 Agree       9   1.9 0.0203 #> # ℹ 18 more rows"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_means.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate means with confidence intervals — get_means","title":"Calculate means with confidence intervals — get_means","text":"Use function calculate simple weighted means 95% confidence intervals weighted grouped means.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_means.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate means with confidence intervals — get_means","text":"","code":"get_means(df, x, group, wt)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_means.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate means with confidence intervals — get_means","text":"df object type data.frame tibble. piping df function, required. x Either character string symbol. variable want get mean. group Either character string symbol. variable want means grouped . wt Weights. Add weighting variable want get weighted means","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_means.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate means with confidence intervals — get_means","text":"x, group, wt arguments can either strings symbols (meaning can quotes quotes). benefit makes really easy iterate function list vector variables functions like map() purrr::map() walk() purrr::walk() found purrr package.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/get_means.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate means with confidence intervals — get_means","text":"","code":"# load the package library(dplyr)  # Let's calculate the overall average score for trad_n get_means(test_data, trad_n) #> # A tibble: 1 × 6 #>    mean    sd     n std.error conf.low conf.high #>   <dbl> <dbl> <dbl>     <dbl>    <dbl>     <dbl> #> 1  4.13  3.62   250      0.23     3.68      4.58  # it also works if x is a string get_means(test_data, \"trad_n\") #> # A tibble: 1 × 6 #>    mean    sd     n std.error conf.low conf.high #>   <dbl> <dbl> <dbl>     <dbl>    <dbl>     <dbl> #> 1  4.13  3.62   250      0.23     3.68      4.58  # Let's do that again but add weights get_means(test_data, trad_n, wt = wts) #> # A tibble: 1 × 6 #>    mean    sd     n std.error conf.low conf.high #>   <dbl> <dbl> <dbl>     <dbl>    <dbl>     <dbl> #> 1  4.16  3.62   250      0.23     3.71      4.61  # the wt argument can also be in quotes like this get_means(test_data, \"trad_n\", wt = \"wts\") #> # A tibble: 1 × 6 #>    mean    sd     n std.error conf.low conf.high #>   <dbl> <dbl> <dbl>     <dbl>    <dbl>     <dbl> #> 1  4.16  3.62   250      0.23     3.71      4.61  # Now let's do the average score for different education levels get_means(test_data, trad_n, edu_f, wts) #> # A tibble: 4 × 7 #>   edu_f                mean    sd     n std.error conf.low conf.high #>   <fct>               <dbl> <dbl> <dbl>     <dbl>    <dbl>     <dbl> #> 1 High School or Less  4.69  3.49    61      0.45     3.79      5.58 #> 2 Some College         3.95  3.72    83      0.41     3.14      4.76 #> 3 Bachelor's Degree    3.77  3.47    63      0.44     2.89      4.64 #> 4 Graduate Degree      4.08  3.86    43      0.59     2.89      5.26  # it also works with quotes get_means(test_data, \"trad_n\", \"edu_f\", \"wts\") #> # A tibble: 4 × 7 #>   edu_f                mean    sd     n std.error conf.low conf.high #>   <fct>               <dbl> <dbl> <dbl>     <dbl>    <dbl>     <dbl> #> 1 High School or Less  4.69  3.49    61      0.45     3.79      5.58 #> 2 Some College         3.95  3.72    83      0.41     3.14      4.76 #> 3 Bachelor's Degree    3.77  3.47    63      0.44     2.89      4.64 #> 4 Graduate Degree      4.08  3.86    43      0.59     2.89      5.26  # you can also pipe in the `df` argument if you want to do some data # transformations before you calculate the means. For example, say you want # to compare the means of `trad_n` among people who agreed vs disagreed with # the variable `top`: test_data %>%   mutate(top_f2 = make_dicho(top)) %>%   get_means(trad_n, top_f2, wts) #> # A tibble: 2 × 7 #>   top_f2    mean    sd     n std.error conf.low conf.high #>   <fct>    <dbl> <dbl> <dbl>     <dbl>    <dbl>     <dbl> #> 1 Agree     4.52  3.79   100      0.38     3.76      5.27 #> 2 Disagree  3.92  3.5    150      0.29     3.36      4.49"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/hc_theme_default.html","id":null,"dir":"Reference","previous_headings":"","what":"The default theme for hc charts — hc_theme_default","title":"The default theme for hc charts — hc_theme_default","text":"function creates default theme ADL highcharter themes built . ggplot2 equivalent theme_default.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/hc_theme_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The default theme for hc charts — hc_theme_default","text":"","code":"hc_theme_default(   hc,   base_size = 16,   legend_position = \"right\",   axis_text = TRUE,   axis_text_x = TRUE,   axis_text_y = TRUE,   grid = TRUE,   grid_x_only = FALSE,   grid_y_only = FALSE,   ... )"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/hc_theme_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The default theme for hc charts — hc_theme_default","text":"hc highcharter object base_size Base font size, given px Also controls spacing graph. legend_position position legend. Options : \"right\", \"top\", \"bottom\", \"none\". \"none\" removes legend. \"right\" default. axis_text Logical. Determines axes labels. TRUE, default, axes labelled. FALSE, neither axis labelled. Note, controls axes. want remove one axis, use axis_text_x axis_text_y. axis_text_x Logical. Determines x-axis labels. TRUE, default, x-axis labels shown. FALSE, x-axis labels removed plot. axis_text_y Logical. Determines y-axis labels. TRUE, default, y-axis labels shown. FALSE, y-axis labels removed plot. grid Logical. Determines grid lines appear. TRUE, default, grid lines appear. FALSE, grid lines disappear, regardless grid_x_only grid_y_only set . grid_x_only Logical. Determines x-axis grid lines (vertical lines) appear. FALSE, default, grid lines appear. TRUE, x-axis grid lines appear y-axis grid lines disappear. grid_y_only Logical. Determines y-axis grid lines (horizontal lines) appear. FALSE, default, grid lines appear. TRUE, y-axis grid lines appear  x-axis grid lines disappear. ... Additional arguments passed","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/hc_theme_default.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The default theme for hc charts — hc_theme_default","text":"Due certain limitations Highcharter, quite extensive theme_default. example, minor grid lines right now. able figure might add . addition, faceting arguments theme_default present ","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Make binary variables — make_binary","title":"Make binary variables — make_binary","text":"Convert vector class factor haven_labelled \"binary vector\". refer \"binary vector\", referring vector class numeric two values: 0 1. Another way thinking turning variable dummy variable.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make binary variables — make_binary","text":"","code":"make_binary(x, flip_values = FALSE)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make binary variables — make_binary","text":"x vector class haven_labelled factor. flip_values Logical. FALSE, default, values kept . TRUE, values associated 1 0 flipped. See third example information.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_binary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make binary variables — make_binary","text":"make_binary() builds make_dicho() therefore designed work vector class factor, haven_labelled, numeric value labels. built make_dicho, vector  numeric value labels, function return error. Similar make_dicho() provides opportunity flip factor levels, make_binary() allows flip values recoded 0 recoded 1. , just set flip_values = TRUE. addition, function adds three new attributes. first attribute, transformation, indicates data transformation original vector underwent create new vector. second attribute, label, contains variable label found original variable. However, original vector variable label, attribute show . third attribute, labels, adds value labels can see 1 0 mean.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make binary variables — make_binary","text":"","code":"library(tibble) library(dplyr) library(labelled) library(haven)  # create fake data df <- tibble::tribble(   ~x, ~y, ~z,   3, 2, 3,   4, 4, 2,   2, 6, 1,   1, 1, 4,   5, 4, 3,   6, 5, 6 ) %>% # add value labels labelled::set_value_labels(   x = c(`Strongly agree` = 1,         `Agree` = 2,         `Somewhat agree` = 3,         `Somewhat disagree` = 4,         `Disagree` = 5,         `Strongly disagree` = 6),   y = c(`Strongly agree` = 1,         `Agree` = 2,         `Somewhat agree` = 3,         `Somewhat disagree` = 4,         `Disagree` = 5,         `Strongly disagree` = 6),   z = c(`Strongly agree` = 1,         `Agree` = 2,         `Somewhat agree` = 3,         `Somewhat disagree` = 4,         `Disagree` = 5,         `Strongly disagree` = 6) ) %>% # add variable labels labelled::set_variable_labels(   x = \"This is the variable label for x\",   y = \"This is the variable label for y\",   z = \"This is the variable label for z\" )  # show the data transformation with a haven_labelled vector binary_df <- df %>% dplyr::mutate(binary_x = make_binary(x)) # check the updated dataset binary_df #> # A tibble: 6 × 4 #>   x                     y                     z                     binary_x #>   <dbl+lbl>             <dbl+lbl>             <dbl+lbl>                <dbl> #> 1 3 [Somewhat agree]    2 [Agree]             3 [Somewhat agree]           1 #> 2 4 [Somewhat disagree] 4 [Somewhat disagree] 2 [Agree]                    0 #> 3 2 [Agree]             6 [Strongly disagree] 1 [Strongly agree]           1 #> 4 1 [Strongly agree]    1 [Strongly agree]    4 [Somewhat disagree]        1 #> 5 5 [Disagree]          4 [Somewhat disagree] 3 [Somewhat agree]           0 #> 6 6 [Strongly disagree] 5 [Disagree]          6 [Strongly disagree]        0  # Check the attributes attributes(binary_df$binary_x) #> $transformation #> Converting 'x' to a binary variable with 'Agree' = 1 and 'Disagree' = 0. #>  #> $label #> [1] \"This is the variable label for x\" #>  #> $labels #>    Agree Disagree  #>        1        0  #>  # another way of checking the attributes str(binary_df$binary_x) #>  num [1:6] 1 0 1 1 0 0 #>  - attr(*, \"transformation\")= 'glue' chr \"Converting 'x' to a binary variable with 'Agree' = 1 and 'Disagree' = 0.\" #>  - attr(*, \"label\")= chr \"This is the variable label for x\" #>  - attr(*, \"labels\")= Named num [1:2] 1 0 #>   ..- attr(*, \"names\")= chr [1:2] \"Agree\" \"Disagree\"  # check the factor levels unique(binary_df$binary_x) #> [1] 1 0  # ----------------------------------------------------------------------------  # function also works with factors binary_df <- df %>%   dplyr::mutate(     # convert variable to a factor     factor_x = haven::as_factor(x),     # convert the factor to a binary variable     binary_x = make_binary(factor_x)   )  # check the updated dataset binary_df #> # A tibble: 6 × 5 #>   x                     y                     z                factor_x binary_x #>   <dbl+lbl>             <dbl+lbl>             <dbl+lbl>        <fct>       <dbl> #> 1 3 [Somewhat agree]    2 [Agree]             3 [Somewhat agr… Somewha…        1 #> 2 4 [Somewhat disagree] 4 [Somewhat disagree] 2 [Agree]        Somewha…        0 #> 3 2 [Agree]             6 [Strongly disagree] 1 [Strongly agr… Agree           1 #> 4 1 [Strongly agree]    1 [Strongly agree]    4 [Somewhat dis… Strongl…        1 #> 5 5 [Disagree]          4 [Somewhat disagree] 3 [Somewhat agr… Disagree        0 #> 6 6 [Strongly disagree] 5 [Disagree]          6 [Strongly dis… Strongl…        0  # Check the attributes attributes(binary_df$binary_x) #> $transformation #> Converting 'factor_x' to a binary variable with 'Agree' = 1 and 'Disagree' = 0. #>  #> $label #> [1] \"This is the variable label for x\" #>  #> $labels #>    Agree Disagree  #>        1        0  #>  # another way of checking the attributes str(binary_df$binary_x) #>  num [1:6] 1 0 1 1 0 0 #>  - attr(*, \"transformation\")= 'glue' chr \"Converting 'factor_x' to a binary variable with 'Agree' = 1 and 'Disagree' = 0.\" #>  - attr(*, \"label\")= chr \"This is the variable label for x\" #>  - attr(*, \"labels\")= Named num [1:2] 1 0 #>   ..- attr(*, \"names\")= chr [1:2] \"Agree\" \"Disagree\"  # check the factor levels unique(binary_df$binary_x) #> [1] 1 0  # ----------------------------------------------------------------------------  # function also works inside dplyr::across()  # Create new columns using `across()` binary_df <- df %>%   dplyr::mutate(     # use this example if you don't want to flip the factor levels     dplyr::across(       x:z,       make_binary,       .names = \"binary_{col}\"     ),     # if you want to flip the factor levels, follow this example     dplyr::across(       x:z,       ~make_binary(., flip_values = TRUE),       .names = \"binary_flipped_{col}\"     )   ) # show that the function worked properly by creating two new sets of variables binary_df #> # A tibble: 6 × 9 #>   x                  y       z       binary_x binary_y binary_z binary_flipped_x #>   <dbl+lbl>          <dbl+l> <dbl+l>    <dbl>    <dbl>    <dbl>            <dbl> #> 1 3 [Somewhat agree] 2 [Agr… 3 [Som…        1        1        1                0 #> 2 4 [Somewhat disag… 4 [Som… 2 [Agr…        0        0        1                1 #> 3 2 [Agree]          6 [Str… 1 [Str…        1        0        1                0 #> 4 1 [Strongly agree] 1 [Str… 4 [Som…        1        1        0                0 #> 5 5 [Disagree]       4 [Som… 3 [Som…        0        0        1                1 #> 6 6 [Strongly disag… 5 [Dis… 6 [Str…        0        0        0                1 #> # ℹ 2 more variables: binary_flipped_y <dbl>, binary_flipped_z <dbl>  # show the underlying structure of the entire df str(binary_df) #> tibble [6 × 9] (S3: tbl_df/tbl/data.frame) #>  $ x               : dbl+lbl [1:6] 3, 4, 2, 1, 5, 6 #>    ..@ labels: Named num [1:6] 1 2 3 4 5 6 #>    .. ..- attr(*, \"names\")= chr [1:6] \"Strongly agree\" \"Agree\" \"Somewhat agree\" \"Somewhat disagree\" ... #>    ..@ label : chr \"This is the variable label for x\" #>  $ y               : dbl+lbl [1:6] 2, 4, 6, 1, 4, 5 #>    ..@ labels: Named num [1:6] 1 2 3 4 5 6 #>    .. ..- attr(*, \"names\")= chr [1:6] \"Strongly agree\" \"Agree\" \"Somewhat agree\" \"Somewhat disagree\" ... #>    ..@ label : chr \"This is the variable label for y\" #>  $ z               : dbl+lbl [1:6] 3, 2, 1, 4, 3, 6 #>    ..@ labels: Named num [1:6] 1 2 3 4 5 6 #>    .. ..- attr(*, \"names\")= chr [1:6] \"Strongly agree\" \"Agree\" \"Somewhat agree\" \"Somewhat disagree\" ... #>    ..@ label : chr \"This is the variable label for z\" #>  $ binary_x        : num [1:6] 1 0 1 1 0 0 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'x' to a binary variable with 'Agree' = 1 and 'Disagree' = 0.\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for x\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 0 #>   .. ..- attr(*, \"names\")= chr [1:2] \"Agree\" \"Disagree\" #>  $ binary_y        : num [1:6] 1 0 0 1 0 0 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'y' to a binary variable with 'Agree' = 1 and 'Disagree' = 0.\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for y\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 0 #>   .. ..- attr(*, \"names\")= chr [1:2] \"Agree\" \"Disagree\" #>  $ binary_z        : num [1:6] 1 1 1 0 1 0 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'z' to a binary variable with 'Agree' = 1 and 'Disagree' = 0.\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for z\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 0 #>   .. ..- attr(*, \"names\")= chr [1:2] \"Agree\" \"Disagree\" #>  $ binary_flipped_x: num [1:6] 0 1 0 0 1 1 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'x' to a binary variable with 'Disagree' = 1 and 'Agree' = 0.\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for x\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 0 #>   .. ..- attr(*, \"names\")= chr [1:2] \"Disagree\" \"Agree\" #>  $ binary_flipped_y: num [1:6] 0 1 1 0 1 1 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'y' to a binary variable with 'Disagree' = 1 and 'Agree' = 0.\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for y\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 0 #>   .. ..- attr(*, \"names\")= chr [1:2] \"Disagree\" \"Agree\" #>  $ binary_flipped_z: num [1:6] 0 0 0 1 0 1 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'z' to a binary variable with 'Disagree' = 1 and 'Agree' = 0.\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for z\" #>   ..- attr(*, \"labels\")= Named num [1:2] 1 0 #>   .. ..- attr(*, \"names\")= chr [1:2] \"Disagree\" \"Agree\"  # show how the levels are flipped when \"flip_levels = TRUE\" levels(binary_df$binary_x) #> NULL levels(binary_df$binary_flipped_x) #> NULL"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_df_oxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Automate dataset documentation — make_df_oxy","title":"Automate dataset documentation — make_df_oxy","text":"Creates new R script comes pre-filled roxygen2 comments. new file named \"df_documentation\" located \"R/\" folder package. function based makeOxygen far limited. Unlike makeOxygen works objects data.frames tibbles. purpose function automate process documenting variables data frame leveraging underlying variable labels. Another important difference function makeOxygen function allows either print results home console new script. noted variable variable label, show new R script. dataset_description,","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_df_oxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automate dataset documentation — make_df_oxy","text":"","code":"make_df_oxy(df, title, description, print = FALSE)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_df_oxy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Automate dataset documentation — make_df_oxy","text":"data frame nrow(df) rows ncol(df) variables: \\describe","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_df_oxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automate dataset documentation — make_df_oxy","text":"df Name data.frame tibble object title text want @title part documentation description text want @description part dataset documentation print Logical. output print console. Default FALSE writes new R script beginning value df","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_df_oxy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automate dataset documentation — make_df_oxy","text":"","code":"if (FALSE) { #' # Add variable labels to iris dataset library(labelled) library(dplyr)  iris_labelled <- iris %>%   labelled::set_variable_labels(     Sepal.Length = \"Length of the flower sepal, measured in millimeters\",     Sepal.Width =  \"Width of the flower sepal, measured in millimeters\",     Petal.Length = \"Length of the flower petal, measured in millimeters\",     Petal.Width =  \"Width of the flower petal, measured in millimeters\",     Species = \"The species of flower\"   )  # if you want to print to the console instead of creating a new script # just add print = TRUE to the function make_df_oxy(iris_labelled, print = TRUE) }"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_dicho.html","id":null,"dir":"Reference","previous_headings":"","what":"Make dichotomous factors — make_dicho","title":"Make dichotomous factors — make_dicho","text":"Convert vector class factor haven_labelled \"dichotomous factor vector\". refer \"dichotomous factor vector\", referring vector class factor two levels opposites (e.g., \"Agree\" \"Disagree\")","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_dicho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make dichotomous factors — make_dicho","text":"","code":"make_dicho(x, flip_levels = FALSE)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_dicho.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make dichotomous factors — make_dicho","text":"x vector type haven_labelled factor. flip_levels Logical. FALSE, default, factor levels kept . TRUE, factor levels flipped. specify want change order factor level.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_dicho.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make dichotomous factors — make_dicho","text":"make_dicho designed work vector class factor, haven_labelled, numeric value labels. vector  numeric value labels, function return error. function first converts vector factor using as_factor() haven::as_factor() haven package. , removes first word multiple words factor level. resulting factor levels default alphabetical want reverse , just set flip_levels = TRUE function. addition, function adds two new attributes. first attribute, transformation, indicates data transformation original vector underwent create new vector. second attribute, label, contains variable label found original variable. However, original vector variable label, attribute show . useful care ","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_dicho.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make dichotomous factors — make_dicho","text":"","code":"library(tibble) library(dplyr) library(labelled) library(haven)  # create fake data df <- tibble::tribble(   ~x, ~y, ~z,   3, 2, 3,   4, 4, 2,   2, 6, 1,   1, 1, 4,   5, 4, 3,   6, 5, 6 ) %>% # add value labels labelled::set_value_labels(   x = c(`Strongly agree` = 1,         `Agree` = 2,         `Somewhat agree` = 3,         `Somewhat disagree` = 4,         `Disagree` = 5,         `Strongly disagree` = 6),   y = c(`Strongly agree` = 1,         `Agree` = 2,         `Somewhat agree` = 3,         `Somewhat disagree` = 4,         `Disagree` = 5,         `Strongly disagree` = 6),   z = c(`Strongly agree` = 1,         `Agree` = 2,         `Somewhat agree` = 3,         `Somewhat disagree` = 4,         `Disagree` = 5,         `Strongly disagree` = 6) ) %>% # add variable labels labelled::set_variable_labels(   x = \"This is the variable label for x\",   y = \"This is the variable label for y\",   z = \"This is the variable label for z\" )  # show the data transformation with a haven_labelled vector dicho_df <- df %>% dplyr::mutate(dicho_x = make_dicho(x)) # check the updated dataset dicho_df #> # A tibble: 6 × 4 #>   x                     y                     z                     dicho_x  #>   <dbl+lbl>             <dbl+lbl>             <dbl+lbl>             <fct>    #> 1 3 [Somewhat agree]    2 [Agree]             3 [Somewhat agree]    Agree    #> 2 4 [Somewhat disagree] 4 [Somewhat disagree] 2 [Agree]             Disagree #> 3 2 [Agree]             6 [Strongly disagree] 1 [Strongly agree]    Agree    #> 4 1 [Strongly agree]    1 [Strongly agree]    4 [Somewhat disagree] Agree    #> 5 5 [Disagree]          4 [Somewhat disagree] 3 [Somewhat agree]    Disagree #> 6 6 [Strongly disagree] 5 [Disagree]          6 [Strongly disagree] Disagree  # Check the attributes attributes(dicho_df$dicho_x) #> $levels #> [1] \"Agree\"    \"Disagree\" #>  #> $class #> [1] \"factor\" #>  #> $transformation #> Converting 'x' to a dichotomous factor with 'Agree' as the reference level #>  #> $label #> [1] \"This is the variable label for x\" #>  # another way of checking the attributes str(dicho_df$dicho_x) #>  Factor w/ 2 levels \"Agree\",\"Disagree\": 1 2 1 1 2 2 #>  - attr(*, \"transformation\")= 'glue' chr \"Converting 'x' to a dichotomous factor with 'Agree' as the reference level\" #>  - attr(*, \"label\")= chr \"This is the variable label for x\"  # check the factor levels unique(dicho_df$dicho_x) #> [1] Agree    Disagree #> Levels: Agree Disagree  # ----------------------------------------------------------------------------  # function also works with factors dicho_df <- df %>%   dplyr::mutate(     # convert variable to a factor     factor_x = haven::as_factor(x),     # convert the factor to a dichotomous factor     dicho_x = make_dicho(factor_x)   )  # check the updated dataset dicho_df #> # A tibble: 6 × 5 #>   x                     y                     z                 factor_x dicho_x #>   <dbl+lbl>             <dbl+lbl>             <dbl+lbl>         <fct>    <fct>   #> 1 3 [Somewhat agree]    2 [Agree]             3 [Somewhat agre… Somewha… Agree   #> 2 4 [Somewhat disagree] 4 [Somewhat disagree] 2 [Agree]         Somewha… Disagr… #> 3 2 [Agree]             6 [Strongly disagree] 1 [Strongly agre… Agree    Agree   #> 4 1 [Strongly agree]    1 [Strongly agree]    4 [Somewhat disa… Strongl… Agree   #> 5 5 [Disagree]          4 [Somewhat disagree] 3 [Somewhat agre… Disagree Disagr… #> 6 6 [Strongly disagree] 5 [Disagree]          6 [Strongly disa… Strongl… Disagr…  # Check the attributes attributes(dicho_df$dicho_x) #> $levels #> [1] \"Agree\"    \"Disagree\" #>  #> $class #> [1] \"factor\" #>  #> $transformation #> Converting 'factor_x' to a dichotomous factor with 'Agree' as the reference level #>  #> $label #> [1] \"This is the variable label for x\" #>  # another way of checking the attributes str(dicho_df$dicho_x) #>  Factor w/ 2 levels \"Agree\",\"Disagree\": 1 2 1 1 2 2 #>  - attr(*, \"transformation\")= 'glue' chr \"Converting 'factor_x' to a dichotomous factor with 'Agree' as the reference level\" #>  - attr(*, \"label\")= chr \"This is the variable label for x\"  # check the factor levels unique(dicho_df$dicho_x) #> [1] Agree    Disagree #> Levels: Agree Disagree  # ---------------------------------------------------------------------------- # function also works inside dplyr::across()  # Create new columns using `across()` dicho_df <- df %>%   dplyr::mutate(     # use this example if you don't want to flip the factor levels     dplyr::across(       x:z,       make_dicho,       .names = \"dicho_{col}\"     ),     # if you want to flip the factor levels, follow this example     dplyr::across(       x:z,       ~make_dicho(., flip_levels = TRUE),       .names = \"dicho_flipped_{col}\"     )   ) # show that the function worked properly by creating two new sets of variables dicho_df #> # A tibble: 6 × 9 #>   x                     y        z       dicho_x dicho_y dicho_z dicho_flipped_x #>   <dbl+lbl>             <dbl+lb> <dbl+l> <fct>   <fct>   <fct>   <fct>           #> 1 3 [Somewhat agree]    2 [Agre… 3 [Som… Agree   Agree   Agree   Agree           #> 2 4 [Somewhat disagree] 4 [Some… 2 [Agr… Disagr… Disagr… Agree   Disagree        #> 3 2 [Agree]             6 [Stro… 1 [Str… Agree   Disagr… Agree   Agree           #> 4 1 [Strongly agree]    1 [Stro… 4 [Som… Agree   Agree   Disagr… Agree           #> 5 5 [Disagree]          4 [Some… 3 [Som… Disagr… Disagr… Agree   Disagree        #> 6 6 [Strongly disagree] 5 [Disa… 6 [Str… Disagr… Disagr… Disagr… Disagree        #> # ℹ 2 more variables: dicho_flipped_y <fct>, dicho_flipped_z <fct>  # show the underlying structure of the entire df str(dicho_df) #> tibble [6 × 9] (S3: tbl_df/tbl/data.frame) #>  $ x              : dbl+lbl [1:6] 3, 4, 2, 1, 5, 6 #>    ..@ labels: Named num [1:6] 1 2 3 4 5 6 #>    .. ..- attr(*, \"names\")= chr [1:6] \"Strongly agree\" \"Agree\" \"Somewhat agree\" \"Somewhat disagree\" ... #>    ..@ label : chr \"This is the variable label for x\" #>  $ y              : dbl+lbl [1:6] 2, 4, 6, 1, 4, 5 #>    ..@ labels: Named num [1:6] 1 2 3 4 5 6 #>    .. ..- attr(*, \"names\")= chr [1:6] \"Strongly agree\" \"Agree\" \"Somewhat agree\" \"Somewhat disagree\" ... #>    ..@ label : chr \"This is the variable label for y\" #>  $ z              : dbl+lbl [1:6] 3, 2, 1, 4, 3, 6 #>    ..@ labels: Named num [1:6] 1 2 3 4 5 6 #>    .. ..- attr(*, \"names\")= chr [1:6] \"Strongly agree\" \"Agree\" \"Somewhat agree\" \"Somewhat disagree\" ... #>    ..@ label : chr \"This is the variable label for z\" #>  $ dicho_x        : Factor w/ 2 levels \"Agree\",\"Disagree\": 1 2 1 1 2 2 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'x' to a dichotomous factor with 'Agree' as the reference level\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for x\" #>  $ dicho_y        : Factor w/ 2 levels \"Agree\",\"Disagree\": 1 2 2 1 2 2 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'y' to a dichotomous factor with 'Agree' as the reference level\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for y\" #>  $ dicho_z        : Factor w/ 2 levels \"Agree\",\"Disagree\": 1 1 1 2 1 2 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'z' to a dichotomous factor with 'Agree' as the reference level\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for z\" #>  $ dicho_flipped_x: Factor w/ 2 levels \"Disagree\",\"Agree\": 2 1 2 2 1 1 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'x' to a dichotomous factor and reordering the factor levels so that 'Disagree' is the reference level\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for x\" #>  $ dicho_flipped_y: Factor w/ 2 levels \"Disagree\",\"Agree\": 2 1 1 2 1 1 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'y' to a dichotomous factor and reordering the factor levels so that 'Disagree' is the reference level\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for y\" #>  $ dicho_flipped_z: Factor w/ 2 levels \"Disagree\",\"Agree\": 2 2 2 1 2 1 #>   ..- attr(*, \"transformation\")= 'glue' chr \"Converting 'z' to a dichotomous factor and reordering the factor levels so that 'Disagree' is the reference level\" #>   ..- attr(*, \"label\")= chr \"This is the variable label for z\"  # show how the levels are flipped when \"flip_levels = TRUE\" levels(dicho_df$dicho_x) #> [1] \"Agree\"    \"Disagree\" levels(dicho_df$dicho_flipped_x) #> [1] \"Disagree\" \"Agree\""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_percent.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a numeric vector to a percent — make_percent","title":"Convert a numeric vector to a percent — make_percent","text":"Convert numeric vector percent","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_percent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a numeric vector to a percent — make_percent","text":"","code":"make_percent(x, digits = 2, scale = 100)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_percent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a numeric vector to a percent — make_percent","text":"x numeric vector want convert percentages digits many decimals value rounded . Default 2 means show two decimal places, hundredth decimal. scale scaling factor: x multiplied scale formatting. useful underlying data small large. Default 100.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_percent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a numeric vector to a percent — make_percent","text":"","code":"# here's the default scale of 100 x <- c(0.0163, 0.95, 0.0008, 0.002) make_percent(x) #> [1] \"1.63%\" \"95%\"   \"0.08%\" \"0.2%\"   # if the values have already been multiplied by 100 and you don't need to # transform them, then make the scale 1 x <- c(1.63, 95, 0.08, 0.2) make_percent(x, scale = 1) #> [1] \"1.63%\" \"95%\"   \"0.08%\" \"0.2%\"   # And if we want to round to the closest whole number set the digits to 0 x <- c(0.0163, 0.95, 0.0008, 0.002) make_percent(x, digits = 0) #> [1] \"2%\"  \"95%\" \"0%\"  \"0%\""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_quarts.html","id":null,"dir":"Reference","previous_headings":"","what":"Create quartiles — make_quarts","title":"Create quartiles — make_quarts","text":"simple function takes numeric vector input returns factor vector labels indicating quartile .","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_quarts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create quartiles — make_quarts","text":"","code":"make_quarts(x)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/make_quarts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create quartiles — make_quarts","text":"x numeric vector.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/num_rev.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse a numeric function — num_rev","title":"Reverse a numeric function — num_rev","text":"Reverse numeric variable maintaining variable value labels available. Also adds attribute describing transformation original variable underwent. Please check vignette better understanding exactly function .","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/num_rev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse a numeric function — num_rev","text":"","code":"num_rev(x)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/num_rev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse a numeric function — num_rev","text":"x vector class haven_labelled numeric","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/num_rev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse a numeric function — num_rev","text":"","code":"library(dplyr)  test_data %>%   # reverse the variable accept_isr   mutate(accept_isr_rev = num_rev(accept_isr)) %>%   select(starts_with(\"accept\")) #> # A tibble: 250 × 3 #>    accept_hamas              accept_isr                accept_isr_rev            #>    <dbl+lbl>                 <dbl+lbl>                 <dbl+lbl>                 #>  1 4 [Totally unacceptable]  2 [Somewhat acceptable]   3 [Somewhat acceptable]   #>  2 3 [Somewhat unacceptable] 3 [Somewhat unacceptable] 2 [Somewhat unacceptable] #>  3 3 [Somewhat unacceptable] 3 [Somewhat unacceptable] 2 [Somewhat unacceptable] #>  4 1 [Totally acceptable]    1 [Totally acceptable]    4 [Totally acceptable]    #>  5 4 [Totally unacceptable]  4 [Totally unacceptable]  1 [Totally unacceptable]  #>  6 3 [Somewhat unacceptable] 1 [Totally acceptable]    4 [Totally acceptable]    #>  7 2 [Somewhat acceptable]   2 [Somewhat acceptable]   3 [Somewhat acceptable]   #>  8 3 [Somewhat unacceptable] 3 [Somewhat unacceptable] 2 [Somewhat unacceptable] #>  9 4 [Totally unacceptable]  1 [Totally acceptable]    4 [Totally acceptable]    #> 10 4 [Totally unacceptable]  1 [Totally acceptable]    4 [Totally acceptable]    #> # ℹ 240 more rows"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/pct_conv.html","id":null,"dir":"Reference","previous_headings":"","what":"Make proper percent labels — pct_conv","title":"Make proper percent labels — pct_conv","text":"function wrapper around common data transformation done every time make frequency plot","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/pct_conv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make proper percent labels — pct_conv","text":"","code":"pct_conv(data, x = pct, digits = 1)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/pct_conv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make proper percent labels — pct_conv","text":"data data frame vector. Can left blank used piping x variable want convert percentage. value pct default always pct. digits Number decimal places percent rounded ","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/pct_conv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make proper percent labels — pct_conv","text":"","code":"library(tibble) library(dplyr) library(labelled) library(haven)  # create the fake data df <- tibble::tribble(   ~x, ~y, ~z,   3, 2, 3,   4, 4, 2,   2, 6, 1,   1, 1, 4,   5, 4, 3,   6, 5, 6 )  df %>%   count(x) %>%   mutate(pct = prop.table(n)) %>%   pct_conv() #> # A tibble: 6 × 4 #>       x     n   pct pct_lab #>   <dbl> <int> <dbl> <chr>   #> 1     1     1  16.7 16.7%   #> 2     2     1  16.7 16.7%   #> 3     3     1  16.7 16.7%   #> 4     4     1  16.7 16.7%   #> 5     5     1  16.7 16.7%   #> 6     6     1  16.7 16.7%"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/pivot_longer_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot data from wide to long with value labels — pivot_longer_values","title":"Pivot data from wide to long with value labels — pivot_longer_values","text":"function wrapper around pivot_longer. function operates pretty much exact way uses variable labels variables specified cols make new value labels new variable created names_to variable.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/pivot_longer_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot data from wide to long with value labels — pivot_longer_values","text":"","code":"pivot_longer_values(data, cols, names_to, values_to)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/pivot_longer_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot data from wide to long with value labels — pivot_longer_values","text":"data data frame pivot. cols <tidy-select> Columns pivot longer format. names_to character vector specifying new column columns create information stored column names data specified cols. length 0, NULL supplied, columns created. length 1, single column created contain column names specified cols. length >1, multiple columns created. case, one names_sep names_pattern must supplied specify column names split. also two additional character values can take advantage : NA discard corresponding component column name. \".value\" indicates corresponding component column name defines name output column containing cell values, overriding values_to entirely. values_to string specifying name column create data stored cell values. names_to character containing special .value sentinel, value ignored, name value column derived part existing column names.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/prettytable.html","id":null,"dir":"Reference","previous_headings":"","what":"Make pretty HTML tables — prettytable","title":"Make pretty HTML tables — prettytable","text":"Takes data frame object makes pretty table. designed work within adlgraphs package work objects class tbl_df, tbl, data.frame. important note, moment, works frequency tables columns labelled pct n. see changing frequency tables. Nevertheless, working adding functionality, including mean tables, tables factor loadings, linear regression coefficients, others.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/prettytable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make pretty HTML tables — prettytable","text":"","code":"prettytable(x)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/prettytable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make pretty HTML tables — prettytable","text":"x object turn pretty table.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/refactor.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign or reorder factor levels manually — refactor","title":"Assign or reorder factor levels manually — refactor","text":"low level function allows convert character vector factor manuall assign levels, manually reassign levels factor vector","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/refactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign or reorder factor levels manually — refactor","text":"","code":"refactor(f, new_levels, ordered = NA)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/refactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign or reorder factor levels manually — refactor","text":"f factor character vector new_levels list new levels factor ordered Logical. Specifies factor ordered. Default NA, checks see factor ordered uses determine ordered","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/refactor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign or reorder factor levels manually — refactor","text":"","code":"# load the dplyr library so we can use `mutate()` library(dplyr)  # let's manually reorder the factor levels of `edu_f` from the `test_data` # data set so it's in a random order that I specify test_data <- test_data %>%   mutate(     # make the new reordered variable     edu_f_reordered = refactor(       # specify we are reordering the `edu_f` variable       f = edu_f,       new_levels = c(         \"Bachelor's Degree\",         \"Graduate Degree\",         \"High School or Less\",         \"Some College\"       )     )   )  # let's check the new levels levels(test_data$edu_f_reordered) #> [1] \"Bachelor's Degree\"   \"Graduate Degree\"     \"High School or Less\" #> [4] \"Some College\"        # and compare them to the original levels levels(test_data$edu_f) #> [1] \"High School or Less\" \"Some College\"        \"Bachelor's Degree\"   #> [4] \"Graduate Degree\""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/scale_adl.html","id":null,"dir":"Reference","previous_headings":"","what":"ADL color scale — scale_adl","title":"ADL color scale — scale_adl","text":"Create sequential, diverging, categorical color scales using official ADL colors.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/scale_adl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ADL color scale — scale_adl","text":"","code":"scale_adl(   type = \"categorical\",   palette = \"base\",   aesthetic = c(\"fill\", \"color\"),   n,   direction = \"original\",   legend_order = \"original\",   legend_title = NULL,   wrap_legend_labels = NULL,   ... )"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/scale_adl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ADL color scale — scale_adl","text":"type character string indicating type color palette. two options: Categorical used diverging discrete palettes. Sequential used sequential palettes. palette character string indicating name palette (e.g., \"likert_6\"). info see different color palettes available, check adl_palettes. aesthetic Character string vector character strings listing name(s) aesthetic(s) scale works . can useful, example, apply colour settings colour fill aesthetics time, via aesthetic = c(\"colour\", \"fill\") n number colors. direction character string indicating order colors reversed. two values: \"original\" keep original order colors \"reverse\" flips order colors legend_order character string indicating order colors labels legend reversed. Currently two options: \"original\" keeps original order legend \"reverse\" flips order legend legend_title character string indicating title legend . three options : legend_title left blank. happens title scale taken first mapping used aesthetic legend_title = \"none\" happens title removed legend legend_title = \"string\" happens legend title becomes whatever string (case title \"string\") wrap_legend_labels Determine number characters per line labels. Uses label_wrap wrap text across multiple lines. left blank, defaults NULL wrap labels . ... additional arguments pass scale_fill_manual","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/scale_adl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ADL color scale — scale_adl","text":"function scale_adl() created survey data.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/stat_density_quant.html","id":null,"dir":"Reference","previous_headings":"","what":"Stat for density ridgeline plots — stat_density_quant","title":"Stat for density ridgeline plots — stat_density_quant","text":"stat default stat used geom_density_quant get around making . Nevertheless, still works geom_density. similar stat_density stat_density_ridges built sort combination two. One key differences function two one uses Sheather & Jones (\"sj\") default bandwidth selector. done better bandwidth selector Silverman's (\"nrd0\") default two functions. addition, function allows add quantile lines similar stat_density_ridges.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/stat_density_quant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stat for density ridgeline plots — stat_density_quant","text":"","code":"stat_density_quant(   mapping = NULL,   data = NULL,   geom = geom,   position = \"stack\",   ...,   bw = \"sj\",   adjust = 1,   kernel = \"gaussian\",   n = 512,   na.rm = FALSE,   bounds = c(-Inf, Inf),   show.legend = NA,   inherit.aes = TRUE,   quantile_lines = FALSE,   calc_ecdf = FALSE,   quantiles = 4 )"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/stat_density_quant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stat for density ridgeline plots — stat_density_quant","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data. geom_density default. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. bw smoothing bandwidth used. numeric, standard deviation smoothing kernel. character, rule choose bandwidth, listed stats::bw.nrd(). Note automatic calculation bandwidth take weights account. Default sj. adjust multiplicate bandwidth adjustment. makes possible adjust bandwidth still using bandwidth estimator. example, adjust = 1/2 means use half default bandwidth. kernel Kernel. See list available kernels density(). n number equally spaced points density estimated, power two, see density() details na.rm FALSE (default), removes missing values warning.  TRUE silently removes missing values. bounds Known lower upper bounds estimated data. Default c(-Inf, Inf) means (finite) bounds. bound finite, boundary effect default density estimation corrected reflecting tails outside bounds around closest edge. Data points outside bounds removed warning. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). quantile_lines Logical. Determines quantile lines drawn . FALSE default. calc_ecdf TRUE, stat_density_ridges calculates empirical cumulative distribution function (ecdf) returns variable ecdf variable quantile. can mapped onto aesthetics via stat(ecdf) stat(quantile), respectively. quantiles Sets number quantiles data broken . Used either calc_ecdf = TRUE quantile_lines = TRUE. quantiles integer data cut many equal quantiles. vector probabilities data cut .","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"test_data, — test_data","title":"test_data, — test_data","text":"fake dataset used illustrate various functions adlgraphs package,","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"test_data, — test_data","text":"","code":"test_data"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/test_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"test_data, — test_data","text":"data frame nrow(df) rows ncol(df) variables: resp_id Unique ID Respondent wts Survey weighting variable edu highest level school completed highest degree received? edu_f2 College Graduate pid_f3 Political Partisanship top ideal society requires groups top others bottom inferior groups people simply inferior groups dominate one group dominate society deserving Groups bottom just deserving groups top special unfair groups society receive special treatment government harder harder time succeeding parents controlled Much lives controlled plots hatched secrecy small Even though live democracy, people always run things anyway run people really \"run\" country known voters big_events Big events like wars, recessions, outcomes elections controlled small groups people working secret rest us accept_hamas close family member supported Hamas, family friends find … accept_isr close family member supported Israel, family friends find … dislike_jews many close friends/family dislike Jews stick_together Jews stick together Americans values Jews share values. head Jews always like head things. loyal Jews loyal Israel America. business_power Jews much power business world. wall_street Jews much control influence Wall Street. acts_avg Conspiracy Theory Belief sdo_avg Social Dominance Orientation trad_n ADL Index edu_f highest level school completed highest degree received?","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme for coefficient plots — theme_coef","title":"Theme for coefficient plots — theme_coef","text":"function creates theme coefficient plots.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme for coefficient plots — theme_coef","text":"","code":"theme_coef(base_size = 12, grid_x_only = TRUE, ...)"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme for coefficient plots — theme_coef","text":"base_size Base font size, given pts. Also controls spacing graph. grid_x_only Logical. Determines x-axis grid lines (vertical lines) appear. FALSE, default, grid lines appear. TRUE, x-axis grid lines appear y-axis grid lines disappear. ... arguments passed onto theme_default().","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default theme — theme_default","title":"Default theme — theme_default","text":"function creates default theme ADL theme functions built . functions similarly theme_gray, default ggplot2 themes built theme_gray.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default theme — theme_default","text":"","code":"theme_default(   base_size = 12,   base_family = \"R\",   base_line_size = base_size/24,   base_rect_size = base_size/24,   base_lineheight = 1.1,   markdown = FALSE,   legend_position = \"right\",   axis_text = TRUE,   axis_text_x = TRUE,   axis_text_y = TRUE,   grid = TRUE,   grid_x_only = FALSE,   grid_y_only = FALSE,   grid_major = TRUE,   grid_minor = TRUE,   grid_major_x = TRUE,   grid_major_y = TRUE,   grid_minor_x = TRUE,   grid_minor_y = TRUE,   facet_title_bold = FALSE,   facet_title_size = base_size * 0.8,   facet_title_margin_top = 0.8 * half_line,   facet_title_margin_bottom = 0.8 * half_line,   facet_title_margin_right = 0.8 * half_line,   facet_title_margin_left = 0.8 * half_line,   panel_spacing_x = 0,   panel_spacing_y = 0 )"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default theme — theme_default","text":"base_size Base font size, given pts. Also controls spacing graph. base_family Base font family. Default Roboto base_line_size Base size line elements. base_rect_size Base size rect elements. base_lineheight Base line height text markdown Logical. TRUE, text based theme elements use element_markdown() ggtext package add markdown, HMTL, CSS capabilities. FALSE, default, text based theme elements just use element_text() legend_position position legend. Options : \"left\", \"right\", \"top\", \"bottom\", \"none\". \"none\" removes legend. \"right\" default. axis_text Logical. Determines axes labels. TRUE, default, axes labelled. FALSE, neither axis labelled. Note, controls axes. want remove one axis, use axis_text_x axis_text_y. axis_text_x Logical. Determines x-axis labels. TRUE, default, x-axis labels shown. FALSE, x-axis labels removed plot. axis_text_y Logical. Determines y-axis labels. TRUE, default, y-axis labels shown. FALSE, y-axis labels removed plot. grid Logical. Determines grid lines appear. TRUE, default, grid lines appear. FALSE, grid lines disappear. grid_x_only Logical. Determines x-axis grid lines (vertical lines) appear. FALSE, default, grid lines appear. TRUE, x-axis grid lines appear y-axis grid lines disappear. grid_y_only Logical. Determines y-axis grid lines (horizontal lines) appear. FALSE, default, grid lines appear. TRUE, y-axis grid lines appear  x-axis grid lines disappear. grid_major Logical. Determines major grid lines appear. TRUE, default, major grid lines appear. FALSE, major grid lines disappear. grid_minor Logical. Determines minor grid lines appear. TRUE, default, minor grid lines appear. FALSE, minor grid lines disappear. grid_major_x Logical. Determines major x-axis grid lines appear. TRUE, default, major x-axis grid lines appear. FALSE, major x-axis grid lines disappear. grid_major_y Logical. Determines major y-axis grid lines appear. TRUE, default, major y-axis grid lines appear. FALSE, major y-axis grid lines disappear. grid_minor_x Logical. Determines minor x-axis grid lines appear. TRUE, default, minor x-axis grid lines appear. FALSE, minor x-axis grid lines disappear. grid_minor_y Logical. Determines minor y-axis grid lines appear. TRUE, default, minor y-axis grid lines appear. FALSE, minor y-axis grid lines disappear. facet_title_bold Logical. Determines facet labels bold . Default FALSE. facet_title_size Size facet titles, specified pts. Default base_size * 0.8. facet_title_margin_top margin facet title, specified pts. Default 0.8 * half_line. facet_title_margin_bottom margin beneath facet title, specified pts. Default 0.8 * half_line. facet_title_margin_right margin right facet title, specified pts. Default 0.8 * half_line. facet_title_margin_left margin left facet title, specified pts. Default 0.8 * half_line. panel_spacing_x Horizontal spacing different panels faceting graph, given pts. Default 0. panel_spacing_y Vertical spacing different panels faceting graph, given pts. Default 0.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_h_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme for non-stacked horizontal bar plots — theme_h_bar","title":"Theme for non-stacked horizontal bar plots — theme_h_bar","text":"function creates theme non-stacked horizontal bar plots.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_h_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme for non-stacked horizontal bar plots — theme_h_bar","text":"","code":"theme_h_bar(   base_size = 12,   legend_position = \"none\",   axis_text_x = FALSE,   grid = FALSE,   ... )"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_h_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme for non-stacked horizontal bar plots — theme_h_bar","text":"base_size Base font size, given pts. Also controls spacing graph. legend_position position legend. Options : \"left\", \"right\", \"top\", \"bottom\", \"none\". \"none\" removes legend. \"none\" default. axis_text_x Logical. Determines x-axis labels. FALSE, default, x-axis labels removed. TRUE, x-axis labels shown. grid Logical. Determines grid lines appear. FALSE, default, grid lines disappear. TRUE, grid lines appear. ... arguments passed onto theme_default().","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_h_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme for horizontal stacked bar plots — theme_h_stack","title":"Theme for horizontal stacked bar plots — theme_h_stack","text":"function creates theme horizontally stacked bar plots.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_h_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme for horizontal stacked bar plots — theme_h_stack","text":"","code":"theme_h_stack(   base_size = 12,   legend_position = \"top\",   axis_text = FALSE,   grid = FALSE,   ... )"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_h_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme for horizontal stacked bar plots — theme_h_stack","text":"base_size Base font size, given pts. Also controls spacing graph. legend_position position legend. Options : \"left\", \"right\", \"top\", \"bottom\", \"none\". \"none\" removes legend. \"top\" default. axis_text Logical. Determines axes labels. FALSE,  default, neither axis labelled. TRUE, axes labelled. grid Logical. Determines grid lines appear. FALSE, default, grid lines disappear. TRUE, grid lines appear. ... arguments passed onto theme_default().","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_v_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme for vertical non-stacked bar plots — theme_v_bar","title":"Theme for vertical non-stacked bar plots — theme_v_bar","text":"function creates theme non-stacked vertical bar plots","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_v_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme for vertical non-stacked bar plots — theme_v_bar","text":"","code":"theme_v_bar(   base_size = 12,   legend_position = \"none\",   axis_text_y = FALSE,   grid = FALSE,   ... )"},{"path":"https://jdenn0514.github.io/adlgraphs/reference/theme_v_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme for vertical non-stacked bar plots — theme_v_bar","text":"base_size Base font size, given pts. Also controls spacing graph. legend_position position legend. Options : \"left\", \"right\", \"top\", \"bottom\", \"none\". \"none\" removes legend. \"none\" default. axis_text_y Logical. Determines y-axis labels. FALSE, default, y-axis labels removed. TRUE, y-axis labels shown. grid Logical. Determines grid lines appear. FALSE, default, grid lines disappear. TRUE, grid lines appear. ... arguments passed onto theme_default().","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/write_word_table.html","id":null,"dir":"Reference","previous_headings":"","what":"This mainly an internal package but can be used externally — write_word_table","title":"This mainly an internal package but can be used externally — write_word_table","text":"mainly internal package can used externally","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/reference/write_word_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This mainly an internal package but can be used externally — write_word_table","text":"","code":"write_word_table(x, doc)"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://jdenn0514.github.io/adlgraphs/news/index.html","id":"get_means-0-2-0","dir":"Changelog","previous_headings":"New functions","what":"get_means","title":"adlgraphs 0.2.0","text":"function makes easy calculate means confidence intervals. contains four arguments: df, x, group, wt important argument group allows calculate means grouping variable. operates similar .argument dplyr functions.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/news/index.html","id":"get_freqs-0-2-0","dir":"Changelog","previous_headings":"New functions","what":"get_freqs","title":"adlgraphs 0.2.0","text":"makes easy calculate weighted frequencies. contains first four arguments get_means also contains fifth argument, cross_tab. setting cross_tab = TRUE pivot table appears like cross tabs.","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/news/index.html","id":"make_percent-0-2-0","dir":"Changelog","previous_headings":"New functions","what":"make_percent","title":"adlgraphs 0.2.0","text":"Add % symbol numeric vector result convert character vector Digits specifies many decimal places percentage rounded Scale determines scale numeric vector values multiplied","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/news/index.html","id":"make_df_oxy-0-2-0","dir":"Changelog","previous_headings":"New functions","what":"make_df_oxy","title":"adlgraphs 0.2.0","text":"simple function makes easier create documentation data sets leveraging underlying variable labels dataset","code":""},{"path":[]},{"path":"https://jdenn0514.github.io/adlgraphs/news/index.html","id":"get_freq_table-0-2-0","dir":"Changelog","previous_headings":"Bug fixes and new features","what":"get_freq_table","title":"adlgraphs 0.2.0","text":"Now arguments accept either strings symbols, making easier use functional programming also contains new argument show_genpop enables determine whether want column showing frequencies general population .","code":""},{"path":"https://jdenn0514.github.io/adlgraphs/news/index.html","id":"adl_bar_plots-0-2-0","dir":"Changelog","previous_headings":"Bug fixes and new features","what":"adl_bar_plots","title":"adlgraphs 0.2.0","text":"Fixed bug mean plots didn’t work dodged vertical charts.","code":""}]
