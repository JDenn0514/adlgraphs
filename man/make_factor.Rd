% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_factor.R
\name{make_factor}
\alias{make_factor}
\title{Convert a labelled vector into a factor}
\usage{
make_factor(x, ordered = FALSE)
}
\arguments{
\item{x}{A vector with value labels. Can be numeric, character, or a factor}

\item{ordered}{Logical. Determines if the factor be ordered. Defaults to TRUE.}
}
\description{
\code{make_factor()} takes a labelled vector and converts it to a factor variable
using the value labels. This works with numeric, character, and factor vectors.
}
\details{
This function is very similar to \href{https://haven.tidyverse.org/reference/as_factor.html}{\code{haven::as_factor()}}
and
\href{https://strengejacke.github.io/sjlabelled/reference/as_label.html}{\code{sjlabelled::as_label()}}
and is heavily based on both. However, it has some key differences. The main
difference compared to both functions  is that \code{make_factor()} adds a
"transformation" attribute to the new variable  indicating how it was
created. You can see this in the examples.

Compared to \href{https://strengejacke.github.io/sjlabelled/reference/as_label.html}{\code{sjlabelled::as_label()}}
it is not as extensive. For example, while \href{https://strengejacke.github.io/sjlabelled/reference/as_label.html}{\code{sjlabelled::as_label()}}
works with data.frames and vectors, \code{make_factor()} only works with vectors.
In addition, \href{https://strengejacke.github.io/sjlabelled/reference/as_label.html}{\code{sjlabelled::as_label()}}
has many different arguments that enable you to control the appearance of the
labels, NAs, and other things. \code{make_factor()} on the other hand is much
simpler. Similarly,
\href{https://haven.tidyverse.org/reference/as_factor.html}{\code{haven::as_factor()}}
also enables more customization over the output of the labels. Another key
difference between this function and those is that if there are values without
labels, this function returns an error.
}
\examples{

library(adlgraphs)
library(dplyr)

# let's make a new variable and data set
new_df <- test_data \%>\%
  mutate(top_f = make_factor(top))

attributes(new_df$top_f)

}
