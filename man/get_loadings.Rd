% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_loadings.R
\name{get_loadings}
\alias{get_loadings}
\title{Calculate the loadings in factor analysis}
\usage{
get_loadings(
  model,
  labels = NULL,
  threshold = 0.4,
  print = "short",
  nfactors = 1,
  fm = "pa",
  rotate = "oblimin"
)
}
\arguments{
\item{model}{Either a model created using \code{psych::fa()} or a
data.frame}

\item{labels}{Either a character vector or data frame. Creates a
new column called "labels" for each variable in the factor
analysis.}

\item{threshold}{The threshold with which to not show the factor
loadings. Default is 0.4.}

\item{print}{The printing method. Default is "short" which only prints
a dataframe of the factor loadings. The alternative is "long" but
that has not been created yet.}

\item{nfactors}{Number of factors to extract, default is 1.}

\item{fm}{Factoring method fm="minres" will do a minimum residual as will
fm="uls". Both of these use a first derivative. fm="ols" differs very
slightly from "minres" in that it minimizes the entire residual matrix
using an OLS procedure but uses the empirical first derivative. This
will be slower. fm="wls" will do a weighted least squares (WLS)
solution, fm="gls" does a generalized weighted least squares (GLS),
fm="pa" will do the principal factor solution, fm="ml" will do a
maximum likelihood factor analysis. fm="minchi" will minimize the
sample size weighted chi square when treating pairwise correlations
with different number of subjects per pair. fm ="minrank" will do a
minimum rank factor analysis. "old.min" will do minimal residual the
way it was done prior to April, 2017 (see discussion below). fm="alpha"
will do alpha factor analysis as described in Kaiser and Coffey (1965).
Default is "pa".}

\item{rotate}{"none", "varimax", "quartimax", "bentlerT", "equamax",
"varimin", "geominT" and "bifactor" are orthogonal rotations.
"Promax", "promax", "oblimin", "simplimax", "bentlerQ, "geominQ" and
"biquartimin" and "cluster" are possible oblique transformations of
the solution. The default is to do a oblimin transformation, although
versions prior to 2009 defaulted to varimax. SPSS seems to do a
Kaiser normalization before doing Promax, this is done here by the
call to "promax" which does the normalization before calling Promax in
GPArotation.}
}
\description{
This function creates a data frame of factor loadings from
a factor analysis. It can be on an object that was created with
\code{psych::fa()} or it can be used on a data frame. If used on a
data frame, it will run it on all columns in the data frame. Also
works on grouped data frame if you want to check how the factor
loadings may change along the different levels of a group.
}
\examples{

library(adlgraphs)
library(dplyr)
library(psych)

# first lets get our data set
data <- test_data \%>\% 
  select(top:run)

# now create the fa object
model <- fa(data, nfactors = 1, fm = "pa", rotate = "oblimin")
# get just the loadings
get_loadings(model)
# get the loadings with the variable labels based on data object
get_loadings(model, data)

# we can do all of this in one step with pipes
test_data \%>\% 
  # select only the variables we want in the factor analysis
  select(top:run) \%>\% 
  # run the factor analysis
  fa(., nfactors = 1, fm = "pa", rotate = "oblimin") \%>\% 
  # get the loadings
  get_loadings()

# Now let's remove the threshold for the loadings and include labels
test_data \%>\% 
  # select only the variables we want in the factor analysis
  select(top:run) \%>\% 
  # run the factor analysis
  fa(., nfactors = 1, fm = "pa", rotate = "oblimin") \%>\% 
  # specify threshold is 0
  get_loadings(threshold = 0, labels = data)

# alternatively, we could skip the fa step entirely like so
test_data \%>\% 
  # select only the variables we want in the factor analysis
  select(top:run) \%>\% 
  # specify number of factors, rotation, and factor method
  get_loadings()

# we can also specify the number of factors, rotation, and factoring method
test_data \%>\% 
  # select only the variables we want in the factor analysis
  select(top:run) \%>\% 
  # specify number of factors, rotation, factor method, and threshold
  get_loadings(nfactors = 2, rotate = "varimax", fm = "minres", threshold = 0.2) 

# we can also calculate the factor loadings by a grouping variable
test_data \%>\% 
  # select the grouping variable and the variables to be used in factor analysis
  select(edu_f2, top:run) \%>\% 
  # group the data
  group_by(edu_f2) \%>\% 
  # specify number of factors, rotation, factor method, and threshold
  get_loadings(nfactors = 2, rotate = "varimax", fm = "minres", threshold = 0.2) 


}
