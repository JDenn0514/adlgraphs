% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/case_match_fct.R
\name{case_match_fct}
\alias{case_match_fct}
\title{\code{case_match} with factor levels}
\usage{
case_match_fct(x, ..., .default = NULL)
}
\arguments{
\item{x}{A vector to match against.}

\item{...}{<\code{\link[rlang:dyn-dots]{dynamic-dots}}> A sequence of two-sided
formulas: \code{old_values ~ new_value}. The right hand side (RHS) determines
the output value for all values of \code{.x} that match the left hand side
(LHS).

The LHS must evaluate to the same type of vector as \code{.x}. It can be any
length, allowing you to map multiple \code{.x} values to the same RHS value.
If a value is repeated in the LHS, i.e. a value in \code{.x} matches to
multiple cases, the first match is used.

The RHS inputs will be coerced to their common type. Each RHS input will be
\link[vctrs:theory-faq-recycling]{recycled} to the size of \code{.x}.}

\item{.default}{The value used when values in \code{.x} aren't matched by any of
the LHS inputs. If \code{NULL}, the default, a \code{NA} will be used.}
}
\value{
A factor vector with the same size as \code{.x} and the same type as the
common type of the RHS inputs and \code{.default} and levels as defined by the
order of the RHS inputs.
}
\description{
Recode a variable using the \code{dplyr::case_match()} syntax
}
\examples{
# import dplyr so we can use their starwars dataset
library(dplyr)
# create a vector with a variable label
species <- starwars$species \%>\% structure(label = "This is a variable label")

new_species <- case_match_fct(
  species,
  "Human" ~ "Humanoid",
  "Droid" ~ "Robot",
  c("Wookiee", "Ewok") ~ "Hairy",
  .default = "Other"
)

# now let's check to see that it added the transformation metadata and the
#variable label
str(new_species)

# now let's create a variable "new_species" and get the frequencies for it
# we can see the frequencies are in the same order we applied.
starwars \%>\%
  dplyr::mutate(
    new_species = case_match_fct(
      species,
      "Human" ~ "Humanoid",
      "Droid" ~ "Robot",
      c("Wookiee", "Ewok") ~ "Hairy",
      .default = "Other"
    )
  ) \%>\%
  dplyr::count(new_species)

# now let's do the same but with dplyr::case_match()
# we can see that the frequencies are in alphabetical order
starwars \%>\%
  dplyr::mutate(
    new_species = dplyr::case_match(
      species,
      "Human" ~ "Humanoid",
      "Droid" ~ "Robot",
      c("Wookiee", "Ewok") ~ "Hairy",
      .default = "Other"
    )
  ) \%>\%
  dplyr::count(new_species)

}
\seealso{
\code{\link[=case_when_fct]{case_when_fct()}}
}
