% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_means.R
\name{get_means}
\alias{get_means}
\title{Calculate means with confidence intervals}
\usage{
get_means(
  data,
  x,
  group = NULL,
  wt = NULL,
  decimals = 3,
  na.rm = TRUE,
  conf_level = 0.95
)
}
\arguments{
\item{data}{An object of type data.frame or tibble. If piping the data into the
function, this is not required.}

\item{x}{Either a character string or symbol. The variable with which you want
to get the mean.}

\item{group}{<\code{\link[=dplyr_tidy_select]{tidy-select}}> A selection of columns to
group the data by in addition to \code{treats}. This operates very similarly
to \code{.by} from dplyr (for more info on that see \link[=dplyr_by]{?dplyr_by}). It can
also be a character vector, but it can't be an external vector.}

\item{wt}{Weights. Add if you have a weighting variable and want to get
weighted means.}

\item{decimals}{Number of decimals to round the results to. Default is 3.}

\item{na.rm}{Logical. Determines if NAs should be removed from the grouping
variables prior to analysis. Default is TRUE.}

\item{conf_level}{What should the confidence level be when calculating
confidence intervals. Defaults to 0.95}
}
\description{
Use this function to calculate simple weighted means with 95\% confidence
intervals or weighted grouped means.
}
\details{
The \code{x}, \code{group}, and \code{wt} arguments can either be strings or symbols
(meaning they can have quotes or no quotes). The benefit of this is that it
makes it easy to iterate this function over a list or vector of
variables with other functions like \code{\link[=map]{map()}} \code{\link[purrr:map]{purrr::map()}} or \code{\link[=walk]{walk()}}
\code{\link[purrr:map]{purrr::walk()}} that are found in the \code{purrr} package.
}
\examples{
# load the package
library(dplyr)

# Let's calculate the overall average score for trad_n
get_means(test_data, trad_n)

# it also works if x is a string
get_means(test_data, "trad_n")

# Let's do that again but add weights
get_means(test_data, trad_n, wt = wts)

# the wt argument can also be in quotes like this
get_means(test_data, "trad_n", wt = "wts")

# Now let's do the average score for different education levels
get_means(test_data, trad_n, edu_f, wts)

# it also works with quotes
get_means(test_data, "trad_n", "edu_f", "wts")

# you can also pipe in the `data` argument if you want to do some data
# transformations before you calculate the means. For example, say you want
# to compare the means of `trad_n` among people who agreed vs disagreed with
# the variable `top`:
test_data \%>\%
  mutate(top_f2 = make_dicho(top)) \%>\%
  get_means(trad_n, top_f2, wts)

}
