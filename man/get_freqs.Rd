% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_freqs.R
\name{get_freqs}
\alias{get_freqs}
\title{Calculate weighted frequencies}
\usage{
get_freqs(data, x, group, wt, drop_zero = FALSE, decimals = 3, na.rm = TRUE)
}
\arguments{
\item{data}{An object of type data.frame or tibble. If piping the data into the
function, this is not required.}

\item{x}{Either a character string or symbol. The variable with which want
to get the frequencies.}

\item{group}{<\code{\link[dplyr:dplyr_tidy_select]{tidy-select}}> A selection of columns to
group the data by in addition to \code{treats}. This operates very similarly
to \code{.by} from dplyr (for more info on that see \link[dplyr:dplyr_by]{?dplyr_by}).}

\item{wt}{Weights. Add if you have a weighting variable and want to get
weighted frequencies.}

\item{drop_zero}{Logical. Determines if rows with 0 should be removed
Default is \code{FALSE}.}

\item{decimals}{Number of decimals each number should be rounded to. Default
is 3.}

\item{na.rm}{Logical. Determines if NAs should be kept or removed Default is
\code{TRUE}.}
}
\description{
Use this function to calculate simple weighted frequencies.
You can also specify a grouping variable by which you want to calculate the
frequencies.

The \code{x}, \code{group}, and \code{wt} arguments can either be strings or symbols
(meaning they can have quotes or no quotes). The benefit of this is that it
makes it really easy to iterate this function over a list or vector of
variables with other functions like \code{\link[purrr:map]{purrr::map()}} \code{\link[purrr:map]{purrr::map()}} or \code{\link[purrr:map]{purrr::walk()}}
\code{\link[purrr:map]{purrr::walk()}} that are found in the \code{purrr} package.
}
\examples{
# load the package
library(dplyr)

# Let's calculate the overall frequency for big_events
get_freqs(test_data, big_events)

# Let's do that again but add weights
get_freqs(test_data, big_events, wt = wts)

# Can also a grouping variable by specifying the group arg
get_freqs(test_data, big_events, group = pid_f3, wt = wts)

# You can also group the data and do it
test_data \%>\% 
  group_by(pid_f3) \%>\% 
  get_freqs(big_events, wt = wts)

# you can also group by two or more variables
get_freqs(test_data, big_events, group = c(pid_f3, edu_f2), wt = wts)

# also works when the arguments are strings
get_freqs(test_data, "big_events", group = c("pid_f3", "edu_f2"), wt = "wts")


}
