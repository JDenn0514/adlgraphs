% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_freqs.R
\name{get_freqs}
\alias{get_freqs}
\title{Calculate means with confidence intervals}
\usage{
get_freqs(df, x, group, wt, cross_tab = FALSE)
}
\arguments{
\item{df}{An object of type data.frame or tibble. If piping the df into the
function, this is not required.}

\item{x}{Either a character string or symbol. The variable with which want
to get the frequencies.}

\item{group}{Either a character string or a symbol. The grouping variable.}

\item{wt}{Weights. Add if you have a weighting variable and want to get
weighted frequencies}

\item{cross_tab}{Logical. If a \code{group} object has been supplied, should the
the table be pivoted to create make it like crosstabs}
}
\description{
Use this function to calculate simple weighted means with 95\% confidence
intervals or weighted grouped means.
}
\details{
The \code{x}, \code{group}, and \code{wt} arguments can either be strings or symbols
(meaning they can have quotes or no quotes). The benefit of this is that it
makes it really easy to iterate this function over a list or vector of
variables with other functions like \code{\link[=map]{map()}} \code{\link[purrr:map]{purrr::map()}} or \code{\link[=walk]{walk()}}
\code{\link[purrr:map]{purrr::walk()}} that are found in the \code{purrr} package.
}
\examples{
# load the package
library(dplyr)

# Let's calculate the overall average score for trad_n
get_freqs(test_data, trad_n)

# it also works if x is a string
get_means(test_data, "trad_n")

# Let's do that again but add weights
get_means(test_data, trad_n, wt = wts)

# the wt argument can also be in quotes like this
get_means(test_data, "trad_n", wt = "wts")

# Now let's do the average score for different education levels
get_means(test_data, trad_n, edu_f, wts)

# it also works with quotes
get_means(test_data, "trad_n", "edu_f", "wts")

# you can also pipe in the `df` argument if you want to do some data
# transformations before you calculate the means. For example, say you want
# to compare the means of `trad_n` among people who agreed vs disagreed with
# the variable `prod_isr`:
test_data \%>\%
  mutate(prod_isr_f2 = make_dicho(prod_isr)) \%>\%
  get_means(trad_n, prod_isr_f2, wts)




}
