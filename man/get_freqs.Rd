% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_freqs.R
\name{get_freqs}
\alias{get_freqs}
\title{Calculate weighted frequencies}
\usage{
get_freqs(data, x, group, wt, cross_tab = FALSE)
}
\arguments{
\item{data}{An object of type data.frame or tibble. If piping the data into the
function, this is not required.}

\item{x}{Either a character string or symbol. The variable with which want
to get the frequencies.}

\item{group}{Either a character string or a symbol. The grouping variable.}

\item{wt}{Weights. Add if you have a weighting variable and want to get
weighted frequencies}

\item{cross_tab}{Logical. If a \code{group} object has been supplied, should the
the table be pivoted to create make it like crosstabs}
}
\description{
Use this function to calculate simple weighted frequencies weighted grouped.
You can also specify a grouping variable by which you want to calculate the
frequencies
}
\details{
The \code{x}, \code{group}, and \code{wt} arguments can either be strings or symbols
(meaning they can have quotes or no quotes). The benefit of this is that it
makes it really easy to iterate this function over a list or vector of
variables with other functions like \code{\link[=map]{map()}} \code{\link[purrr:map]{purrr::map()}} or \code{\link[=walk]{walk()}}
\code{\link[purrr:map]{purrr::walk()}} that are found in the \code{purrr} package.
}
\examples{
# load the package
library(dplyr)

# Let's calculate the overall frequency for big_events
get_freqs(test_data, big_events)

# it also works if x is a string
get_means(test_data, "big_events")

# Let's do that again but add weights
get_freqs(test_data, big_events, wt = wts)

# the wt argument can also be in quotes like this
get_freqs(test_data, "big_events", wt = "wts")

# Now let's do the average score for different education levels
get_freqs(test_data, big_events, edu_f, wts)

# it also works with quotes
get_freqs(test_data, "big_events", "edu_f", "wts")

# if we want to pivot the results so they look like cross tabs, then we need
# to set `cross_tab` to TRUE
get_freqs(test_data, big_events, edu_f, wts, cross_tab = TRUE)

# you can also pipe in the `data` argument if you want to do some data
# transformations before you calculate the means. For example, say you want
# to compare the frequencies of `big_events` among people who agreed vs
# disagreed with the variable `top`:
test_data \%>\%
  mutate(top_f2 = make_dicho(top)) \%>\%
  get_freqs(trad_n, top_f2, wts)




}
