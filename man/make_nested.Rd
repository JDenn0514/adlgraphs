% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_nested.R
\name{make_nested}
\alias{make_nested}
\title{Create a nested data frame}
\usage{
make_nested(data, group, na.rm = TRUE, sep = "_")
}
\arguments{
\item{data}{A data frame}

\item{group}{Columns to nest by; these will remain in the outer data
frame. If \code{data} is not a grouped data frame, then this must be supplied.
If supplying multiple must be in a vector. Can be either a string or
symbol.}

\item{na.rm}{Determines if rows with NA should be kept or dropped. Defaults
to TRUE.}

\item{sep}{A character string to separate the values. This is the \code{sep}
argument in \code{paste()}. Check examples to to see it in action.}
}
\description{
This function is very similar to \code{tidyr::nest()}in that it creates a data
frame where one of the columns is comprised of a list of data frames.
}
\details{
While similar to \code{tidyr::nest()} there are a few key differences.

The first is that this function uses the vctrs package under the hood,
which makes it about twice as fast as \code{tidyr::nest()}.

Second, it is more limited in its scope and functionality. Where
\code{tidyr::nest()} allows you to determine which columns are in the inner
data frames (the ones in the list column), this function does not.
Instead, you are only able to specify the variables that remain in the
outer data frame.

Third,  this function creates an extra column called "name" that
concatenates the values from the columns in the outer rows together
using \code{paste()}.

Fourth, unlike in \code{tidyr::nest()} where variables supplied to the \code{.by}
argument supersede any grouping variables specified through
\code{dplyr::group_by()}, \code{nest_data()} combines the two to nest the data.
}
\examples{

library(dplyr)
# nest by one variable
make_nested(test_data, pid_f3)

# nest by multiple variables
make_nested(test_data, c(pid_f3, edu_f2))

# group data to create nested data frame
test_data \%>\% 
  dplyr::group_by(pid_f3, edu_f2) \%>\% 
  make_nested()

# use group_by and nest_data 
test_data \%>\% 
  dplyr::group_by(pid_f3) \%>\% 
  make_nested(edu_f2)

# use different sep argument
make_nested(test_data, c(pid_f3, edu_f2), sep = ":")
  


}
